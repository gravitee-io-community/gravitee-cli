{
  "openapi": "3.0.1",
  "info": {
    "title": "Gravitee.io - Management API",
    "version": "3.3.0"
  },
  "servers": [
    {
      "url": "/"
    }
  ],
  "tags": [
    {
      "name": "Plugins"
    },
    {
      "name": "Configuration"
    },
    {
      "name": "Identity Providers"
    },
    {
      "name": "Custom User Fields"
    },
    {
      "name": "Roles"
    },
    {
      "name": "Users"
    },
    {
      "name": "User Registration"
    },
    {
      "name": "Organization"
    },
    {
      "name": "APIs"
    },
    {
      "name": "API Keys"
    },
    {
      "name": "API Memberships"
    },
    {
      "name": "API Analytics"
    },
    {
      "name": "API Logs"
    },
    {
      "name": "API Health"
    },
    {
      "name": "API Pages"
    },
    {
      "name": "API Media"
    },
    {
      "name": "API Events"
    },
    {
      "name": "API Plans"
    },
    {
      "name": "API Subscriptions"
    },
    {
      "name": "API Metadata"
    },
    {
      "name": "API Ratings"
    },
    {
      "name": "API Audits"
    },
    {
      "name": "API Notifications"
    },
    {
      "name": "API Alerts"
    },
    {
      "name": "API Quality"
    },
    {
      "name": "Applications"
    },
    {
      "name": "Application Memberships"
    },
    {
      "name": "Application Subscriptions"
    },
    {
      "name": "Application Analytics"
    },
    {
      "name": "Application Logs"
    },
    {
      "name": "Application Alerts"
    },
    {
      "name": "Application Metadata"
    },
    {
      "name": "Application Notifications"
    },
    {
      "name": "Dashboards"
    },
    {
      "name": "Groups"
    },
    {
      "name": "Group Memberships"
    },
    {
      "name": "Group Invitations"
    },
    {
      "name": "Sharding Tags"
    },
    {
      "name": "Tenants"
    },
    {
      "name": "Metadata"
    },
    {
      "name": "Top APIs"
    },
    {
      "name": "Plans"
    },
    {
      "name": "Dictionaries"
    },
    {
      "name": "Client Registration Providers"
    },
    {
      "name": "Entrypoints"
    },
    {
      "name": "Themes"
    },
    {
      "name": "Portal Notifications"
    },
    {
      "name": "Categories"
    },
    {
      "name": "Subscription"
    },
    {
      "name": "Platform Tickets"
    },
    {
      "name": "Current User"
    },
    {
      "name": "User Notifications"
    },
    {
      "name": "User Tokens"
    },
    {
      "name": "Environment"
    },
    {
      "name": "Alerts"
    },
    {
      "name": "Portal"
    },
    {
      "name": "Portal Pages"
    },
    {
      "name": "Portal Media"
    },
    {
      "name": "Portal APIs"
    },
    {
      "name": "Authentication"
    },
    {
      "name": "Gateway"
    },
    {
      "name": "Platform"
    },
    {
      "name": "Platform Logs"
    },
    {
      "name": "Platform Analytics"
    },
    {
      "name": "Platform Events"
    },
    {
      "name": "Platform Alerts"
    },
    {
      "name": "Messages"
    },
    {
      "name": "Portal entrypoints"
    }
  ],
  "paths": {
    "/notifiers": {
      "get": {
        "tags": [
          "Plugins"
        ],
        "summary": "List notifier plugins",
        "description": "User must have the MANAGEMENT_API[READ] permission to use this service",
        "operationId": "listNotifiers",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of notifiers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotifierListItem"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/notifiers/{notifier}/schema": {
      "get": {
        "tags": [
          "Plugins"
        ],
        "summary": "Get a notifier's schema",
        "description": "User must have the MANAGEMENT_API[READ] permission to use this service",
        "operationId": "getNotifierSchema",
        "parameters": [
          {
            "name": "notifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notifier's schema",
            "content": {}
          },
          "404": {
            "description": "Notifier not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/notifiers/{notifier}": {
      "get": {
        "tags": [
          "Plugins"
        ],
        "summary": "Get a notifier",
        "description": "User must have the MANAGEMENT_API[READ] permission to use this service",
        "operationId": "getNotifier",
        "parameters": [
          {
            "name": "notifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notifier plugin",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotifierEntity"
                }
              }
            }
          },
          "404": {
            "description": "Notifier not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/configuration/identities": {
      "get": {
        "tags": [
          "Configuration",
          "Identity Providers"
        ],
        "summary": "Get the list of identity providers",
        "description": "User must have the ORGANIZATION_IDENTITY_PROVIDER[READ] permission to use this service",
        "operationId": "listIdentityProviders",
        "responses": {
          "200": {
            "description": "List identity providers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdentityProviderListItem"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Configuration",
          "Identity Providers"
        ],
        "summary": "Create an identity provider",
        "description": "User must have the ORGANIZATION_IDENTITY_PROVIDER[CREATE] permission to use this service",
        "operationId": "createIdentityProvider",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewIdentityProviderEntity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Identity provider successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProviderEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "identity-provider"
      }
    },
    "/organizations/{orgId}/configuration/identities/{identityProvider}": {
      "get": {
        "tags": [
          "Configuration",
          "Identity Providers"
        ],
        "summary": "Get an identity provider",
        "description": "User must have the ORGANIZATION_IDENTITY_PROVIDER[READ] permission to use this service",
        "operationId": "getIdentityProvider",
        "parameters": [
          {
            "name": "identityProvider",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An identity provider",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Configuration",
          "Identity Providers"
        ],
        "summary": "Update an identity provider",
        "description": "User must have the ORGANIZATION_IDENTITY_PROVIDER[UPDATE] permission to use this service",
        "operationId": "updateIdentityProvider",
        "parameters": [
          {
            "name": "identityProvider",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIdentityProviderEntity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated identity provider",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProviderEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "dictionary"
      },
      "delete": {
        "tags": [
          "Configuration",
          "Identity Providers"
        ],
        "summary": "Delete an identity provider",
        "description": "User must have the ORGANIZATION_IDENTITY_PROVIDER[DELETE] permission to use this service",
        "operationId": "deleteIdentityProvider",
        "parameters": [
          {
            "name": "identityProvider",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Identity provider successfully deleted",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/configuration/custom-user-fields": {
      "get": {
        "tags": [
          "Custom User Fields",
          "Configuration"
        ],
        "summary": "List All Custom User Fields",
        "description": "User must have the CUSTOM_USER_FIELDS[READ] permission to use this service",
        "operationId": "listAll",
        "responses": {
          "200": {
            "description": "Custom User Field deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomUserFieldEntity"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Custom User Fields",
          "Configuration"
        ],
        "summary": "Create a Custom User Field",
        "description": "User must have the CUSTOM_USER_FIELDS[CREATE] permission to use this service",
        "operationId": "createField",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomUserFieldEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "Custom User Field Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomUserFieldEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/configuration/custom-user-fields/{key}": {
      "put": {
        "tags": [
          "Custom User Fields",
          "Configuration"
        ],
        "summary": "Update a Custom User Field",
        "description": "User must have the CUSTOM_USER_FIELDS[UPDATE] permission to use this service",
        "operationId": "updateField",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomUserFieldEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Custom User Field updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomUserFieldEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Custom User Fields",
          "Configuration"
        ],
        "summary": "Delete a Custom User Field",
        "description": "User must have the CUSTOM_USER_FIELDS[DELETE] permission to use this service",
        "operationId": "deleteField",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Custom User Field deleted",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/configuration/rolescopes/{scope}/roles/{role}/users": {
      "get": {
        "tags": [
          "Roles",
          "Configuration"
        ],
        "summary": "List users with the given role",
        "description": "User must have the MANAGEMENT_ROLE[READ] permission to use this service",
        "operationId": "listUsersPerRole",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "API",
                "APPLICATION",
                "GROUP",
                "ENVIRONMENT",
                "ORGANIZATION",
                "PLATFORM"
              ]
            }
          },
          {
            "name": "role",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MembershipListItem"
                  }
                }
              }
            }
          },
          "204": {
            "description": "List of user's memberships",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MembershipListItem"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Roles",
          "Configuration"
        ],
        "summary": "Add or update a role for a user",
        "description": "User must have the MANAGEMENT_ROLE[CREATE] and MANAGEMENT_ROLE[UPDATE] permission to use this service",
        "operationId": "addRoleToUser",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ORGANIZATION",
                "ENVIRONMENT"
              ]
            }
          },
          {
            "name": "role",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleMembership"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "Membership successfully created / updated",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/configuration/rolescopes/{scope}/roles/{role}/users/{userId}": {
      "delete": {
        "tags": [
          "Roles",
          "Configuration"
        ],
        "summary": "Delete the role for a given user",
        "description": "User must have the MANAGEMENT_ROLE[DELETE] permission to use this service",
        "operationId": "delete",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "API",
                "APPLICATION",
                "GROUP",
                "ENVIRONMENT",
                "ORGANIZATION",
                "PLATFORM"
              ]
            }
          },
          {
            "name": "role",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Role successfully removed",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/configuration/rolescopes/{scope}/roles/{role}": {
      "get": {
        "tags": [
          "Roles",
          "Configuration"
        ],
        "summary": "Get a role",
        "description": "User must have the MANAGEMENT_ROLE[READ] permission to use this service",
        "operationId": "get",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "API",
                "APPLICATION",
                "GROUP",
                "ENVIRONMENT",
                "ORGANIZATION",
                "PLATFORM"
              ]
            }
          },
          {
            "name": "role",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleEntity"
                }
              }
            }
          },
          "404": {
            "description": "Role not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Roles",
          "Configuration"
        ],
        "summary": "Update a role",
        "description": "User must have the MANAGEMENT_ROLE[UPDATE] permission to use this service",
        "operationId": "update",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "API",
                "APPLICATION",
                "GROUP",
                "ENVIRONMENT",
                "ORGANIZATION",
                "PLATFORM"
              ]
            }
          },
          {
            "name": "role",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Role successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleEntity"
                }
              }
            }
          },
          "404": {
            "description": "Role not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Roles",
          "Configuration"
        ],
        "summary": "Delete a role",
        "description": "User must have the MANAGEMENT_ROLE[DELETE] permission to use this service",
        "operationId": "delete_1",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "API",
                "APPLICATION",
                "GROUP",
                "ENVIRONMENT",
                "ORGANIZATION",
                "PLATFORM"
              ]
            }
          },
          {
            "name": "role",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Role successfully deleted",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RoleEntity"
                }
              }
            }
          },
          "404": {
            "description": "Role not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/configuration/rolescopes/{scope}/roles": {
      "get": {
        "tags": [
          "Roles",
          "Configuration"
        ],
        "summary": "List of roles",
        "description": "User must have the MANAGEMENT_ROLE[READ] permission to use this service",
        "operationId": "list",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "API",
                "APPLICATION",
                "GROUP",
                "ENVIRONMENT",
                "ORGANIZATION",
                "PLATFORM"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Role successfully removed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleEntity"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Roles",
          "Configuration"
        ],
        "summary": "Create a role",
        "description": "User must have the MANAGEMENT_ROLE[CREATE] permission to use this service",
        "operationId": "create",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "API",
                "APPLICATION",
                "GROUP",
                "ENVIRONMENT",
                "ORGANIZATION",
                "PLATFORM"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewRoleEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Role successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/configuration/rolescopes": {
      "get": {
        "tags": [
          "Roles",
          "Configuration"
        ],
        "summary": "List availables role scopes",
        "operationId": "list_1",
        "responses": {
          "200": {
            "description": "List of role scopes",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Retrieve a user",
        "description": "User must have the ORGANIZATION_USERS[READ] permission to use this service",
        "operationId": "getUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserEntity"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a user",
        "description": "User must have the ORGANIZATION_USERS[DELETE] permission to use this service",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User successfully deleted",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/users/{id}/_process": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Process a user registration by accepting or rejecting it",
        "operationId": "validateRegistration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "boolean"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Processed user",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/users/{id}/avatar": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get the user's avatar",
        "operationId": "getUserAvatar",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User's avatar",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/users/{id}/resetPassword": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Reset the user's password",
        "description": "User must have the ORGANIZATION_USERS[UPDATE] permission to use this service",
        "operationId": "resetPassword",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User's password reset",
            "content": {}
          },
          "400": {
            "description": "reset page URL must not be null",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/users/{id}/roles": {
      "put": {
        "tags": [
          "Users"
        ],
        "operationId": "updateUserRoles",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserReferenceRoleEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/users/{id}/groups": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "List of groups the user belongs to",
        "description": "User must have the ORGANIZATION_USERS[READ] permission to use this service",
        "operationId": "getGroups",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of user groups",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/users/{id}/memberships": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "List of memberships the user belongs to",
        "description": "User must have the ORGANIZATION_USERS[READ] permission to use this service",
        "operationId": "getMemberships",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of user memberships",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Search for users using the search engine",
        "description": "User must have the ORGANIZATION_USERS[READ] permission to use this service",
        "operationId": "findAll",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List users matching the query criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a user",
        "description": "User must have the ORGANIZATION_USERS[CREATE] permission to use this service",
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewExternalUserEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "List users matching the query criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/users/registration": {
      "post": {
        "tags": [
          "User Registration",
          "Users"
        ],
        "summary": "Register a user",
        "description": "User registration must be enabled",
        "operationId": "registerUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewExternalUserEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "User successfully registered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/users/registration/finalize": {
      "post": {
        "tags": [
          "User Registration",
          "Users"
        ],
        "summary": "Finalize user registration",
        "description": "User registration must be enabled",
        "operationId": "finalizeRegistration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterUserEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "User successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}": {
      "put": {
        "tags": [
          "Organization"
        ],
        "summary": "Create an Organization",
        "operationId": "createOrganization",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrganizationEntity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Organization successfully created",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "organizationEntity"
      },
      "delete": {
        "tags": [
          "Organization"
        ],
        "summary": "Delete an Organization",
        "operationId": "deleteOrganization",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Organization successfully deleted",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/_search": {
      "post": {
        "tags": [
          "APIs"
        ],
        "summary": "Search for API using the search engine",
        "operationId": "searchApis",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List accessible APIs for current user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiListItem"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/deploy": {
      "post": {
        "tags": [
          "APIs"
        ],
        "summary": "Deploy API to gateway instances",
        "description": "User must have the MANAGE_LIFECYCLE permission to use this service",
        "operationId": "deployAPI",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API successfully deployed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}": {
      "get": {
        "tags": [
          "APIs"
        ],
        "summary": "Get the API",
        "description": "User must have the READ permission on the API_DEFINITION to use this service on a private API.",
        "operationId": "get_2",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API definition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "put": {
        "tags": [
          "APIs"
        ],
        "summary": "Update the API",
        "description": "User must have the MANAGE_API permission to use this service",
        "operationId": "update_7",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateApiEntity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "api"
      },
      "post": {
        "tags": [
          "APIs"
        ],
        "summary": "Manage the API's lifecycle",
        "description": "User must have the MANAGE_LIFECYCLE permission to use this service",
        "operationId": "doLifecycleAction",
        "parameters": [
          {
            "name": "action",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "START",
                "STOP"
              ]
            }
          },
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "API's picture",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "APIs"
        ],
        "summary": "Delete the API",
        "description": "User must have the DELETE permission to use this service",
        "operationId": "delete_7",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "API successfully deleted",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/state": {
      "get": {
        "tags": [
          "APIs"
        ],
        "summary": "Get the state of the API",
        "description": "User must have the MANAGE_LIFECYCLE permission to use this service",
        "operationId": "isAPISynchronized",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API's state",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiStateEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/import": {
      "put": {
        "tags": [
          "APIs"
        ],
        "summary": "Update the API with an existing API definition",
        "description": "User must have the MANAGE_API permission to use this service",
        "operationId": "updateWithDefinition",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API successfully updated from API definition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "definition"
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/import/swagger": {
      "post": {
        "tags": [
          "APIs"
        ],
        "summary": "Update the API with an existing Swagger descriptor",
        "description": "User must have the MANAGE_API permission to use this service",
        "operationId": "updateWithSwagger",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImportSwaggerDescriptorEntity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API successfully updated from Swagger descriptor",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "swagger"
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/export": {
      "get": {
        "tags": [
          "APIs"
        ],
        "summary": "Export the API definition in JSON format",
        "description": "User must have the MANAGE_API permission to use this service",
        "operationId": "exportDefinition",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "default"
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API definition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/notifiers": {
      "get": {
        "tags": [
          "APIs"
        ],
        "summary": "List available notifiers for API",
        "description": "User must have the API_NOTIFICATION[READ] permission to use this service",
        "operationId": "getNotifiers",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotifierEntity"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/quality": {
      "get": {
        "tags": [
          "APIs"
        ],
        "summary": "Get the quality metrics of the API",
        "operationId": "getQualityMetrics",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiQualityMetricsEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/reviews": {
      "post": {
        "tags": [
          "APIs"
        ],
        "summary": "Manage the API's review state",
        "description": "User must have the API_DEFINITION[UPDATE] or API_REVIEWS[UPDATE] permission to use this service (depending on the action)",
        "operationId": "doReviewAction",
        "parameters": [
          {
            "name": "action",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ASK"
              ]
            }
          },
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ReviewEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "204": {
            "description": "Updated API",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "review"
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/duplicate": {
      "post": {
        "tags": [
          "APIs"
        ],
        "summary": "Duplicate the API",
        "description": "User must have the MANAGE_API create permission to use this service",
        "operationId": "duplicateAPI",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/DuplicateApiEntity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API definition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "api"
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/keys/{key}": {
      "put": {
        "tags": [
          "API Keys",
          "APIs"
        ],
        "summary": "Update an API Key",
        "description": "User must have the API_SUBSCRIPTION:UPDATE permission to use this service",
        "operationId": "updateApiKey",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "description": "The API id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "The API key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiKeyEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "API Key successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKeyEntity"
                }
              }
            }
          },
          "400": {
            "description": "Bad plan format",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "API Keys",
          "APIs"
        ],
        "summary": "Revoke an API key",
        "description": "User must have the API_SUBSCRIPTION:DELETE permission to use this service",
        "operationId": "revokeApiKey",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "description": "The API id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "The API key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/members": {
      "get": {
        "tags": [
          "API Memberships",
          "APIs"
        ],
        "summary": "List API members",
        "description": "User must have the MANAGE_MEMBERS permission to use this service",
        "operationId": "listApiMembers",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of API's members",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MembershipListItem"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "API Memberships",
          "APIs"
        ],
        "summary": "Add or update an API member",
        "description": "User must have the MANAGE_MEMBERS permission to use this service",
        "operationId": "addOrUpdateApiMember",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ApiMembership"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "Member has been added or updated successfully",
            "content": {}
          },
          "400": {
            "description": "Membership parameter is not valid",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "API Memberships",
          "APIs"
        ],
        "summary": "Remove an API member",
        "description": "User must have the MANAGE_MEMBERS permission to use this service",
        "operationId": "deleteApiMember",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Member has been removed successfully",
            "content": {}
          },
          "400": {
            "description": "User does not exist",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/members/transfer_ownership": {
      "post": {
        "tags": [
          "API Memberships",
          "APIs"
        ],
        "summary": "Transfer the ownership of the API",
        "description": "User must have the TRANSFER_OWNERSHIP permission to use this service",
        "operationId": "transferOwnership",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/TransferOwnership"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Ownership has been transferred successfully",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/members/permissions": {
      "get": {
        "tags": [
          "API Memberships",
          "APIs"
        ],
        "summary": "Get API members",
        "description": "User must have the MANAGE_MEMBERS permission to use this service",
        "operationId": "getPermissions",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API member's permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MemberEntity"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/analytics": {
      "get": {
        "tags": [
          "API Analytics",
          "APIs"
        ],
        "summary": "Get API analytics",
        "description": "User must have the API_ANALYTICS[READ] permission to use this service",
        "operationId": "hits",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Timestamp used to define the start date of the time window to query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "Timestamp used to define the end date of the time window to query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "interval",
            "in": "query",
            "description": "The time interval when getting histogram data (in milliseconds)",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 600000
          },
          {
            "name": "query",
            "in": "query",
            "description": "The Lucene query used to filter data",
            "schema": {
              "type": "string"
            },
            "example": "api:xxxx-xxxx-xxxx-xxxx AND plan:yyyy-yyyy-yyyy-yyyy AND host:\"demo.gravitee.io\" AND path:/test"
          },
          {
            "name": "field",
            "in": "query",
            "description": "The field to query when doing `group_by` queries",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The number of data to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The type of data to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "group_by",
                "date_histo",
                "count"
              ]
            }
          },
          {
            "name": "ranges",
            "in": "query",
            "description": "Ranges allows you to group field's data. Mainly used to group HTTP statuses code with `group_by` queries",
            "schema": {
              "type": "string"
            },
            "example": "100:199;200:299;300:399;400:499;500:599"
          },
          {
            "name": "order",
            "in": "query",
            "description": "The field used to sort results. Can be asc or desc (prefix with minus '-') ",
            "schema": {
              "type": "string"
            },
            "example": "order:-response-time"
          }
        ],
        "responses": {
          "200": {
            "description": "API analytics",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/logs": {
      "get": {
        "tags": [
          "API Logs",
          "APIs"
        ],
        "summary": "Get API logs",
        "operationId": "apiLogs",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Timestamp used to define the start date of the time window to query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "Timestamp used to define the end date of the time window to query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "The expresion used to search for logs. It looks like 'transaction:123-456-789 AND uri=\\\\/path\\\\/to\\\\/resource* AND response-time:[100 TO 200]'. Reserved characters that must be escaped + - = && || > < ! ( ) { } [ ] ^ \" ~ * ? : \\ /",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The number of data to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "field",
            "in": "query",
            "description": "The field to query when doing `group_by` queries",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "true means ASC order, false means DESC",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API logs",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/logs/export": {
      "get": {
        "tags": [
          "API Logs",
          "APIs"
        ],
        "summary": "Export API logs as CSV",
        "operationId": "exportAPILogsAsCSV",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Timestamp used to define the start date of the time window to query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "Timestamp used to define the end date of the time window to query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "The expresion used to search for logs. It looks like 'transaction:123-456-789 AND uri=\\\\/path\\\\/to\\\\/resource* AND response-time:[100 TO 200]'. Reserved characters that must be escaped + - = && || > < ! ( ) { } [ ] ^ \" ~ * ? : \\ /",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The number of data to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "field",
            "in": "query",
            "description": "The field to query when doing `group_by` queries",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "true means ASC order, false means DESC",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API logs as CSV",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/logs/{log}": {
      "get": {
        "tags": [
          "API Logs",
          "APIs"
        ],
        "summary": "Get a specific log",
        "operationId": "apiLog",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "log",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timestamp",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Single log",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/health": {
      "get": {
        "tags": [
          "API Health",
          "APIs"
        ],
        "summary": "Health-check statistics for API",
        "operationId": "health",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "availability"
            }
          },
          {
            "name": "field",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "endpoint"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/health/average": {
      "get": {
        "tags": [
          "API Health",
          "APIs"
        ],
        "summary": "Health-check average statistics for API",
        "operationId": "healthAverage",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "interval",
            "in": "query",
            "schema": {
              "maximum": 1000000000,
              "minimum": 1000,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "AVAILABILITY",
                "RESPONSE_TIME"
              ]
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/health/logs": {
      "get": {
        "tags": [
          "API Health",
          "APIs"
        ],
        "summary": "Health-check logs",
        "operationId": "healthcheckLogs",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "query",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "transition",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API logs",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/health/logs/{log}": {
      "get": {
        "tags": [
          "API Health",
          "APIs"
        ],
        "summary": "Health-check log",
        "operationId": "healthcheckLog",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "log",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Single health-check log",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/pages": {
      "get": {
        "tags": [
          "API Pages",
          "APIs"
        ],
        "summary": "List pages",
        "description": "User must have the READ permission to use this service",
        "operationId": "listPages",
        "parameters": [
          {
            "name": "Accept-Language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "homepage",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "MARKDOWN",
                "SWAGGER",
                "FOLDER",
                "LINK",
                "ROOT",
                "SYSTEM_FOLDER",
                "TRANSLATION"
              ]
            }
          },
          {
            "name": "parent",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "root",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "translated",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of pages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PageEntity"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "API Pages",
          "APIs"
        ],
        "summary": "Create a page",
        "description": "User must have the MANAGE_PAGES permission to use this service",
        "operationId": "createPage",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPageEntity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Page successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "page"
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/pages/_fetch": {
      "post": {
        "tags": [
          "API Pages",
          "APIs"
        ],
        "summary": "Refresh all pages by calling their associated fetcher",
        "description": "User must have the MANAGE_PAGES permission to use this service",
        "operationId": "fetchAllPages",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Pages successfully refreshed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/pages/{page}/media": {
      "get": {
        "tags": [
          "API Media",
          "API Pages",
          "APIs"
        ],
        "summary": "Retrieve all media for an API page",
        "description": "User must have the API_DOCUMENTATION[READ] permission to use this service",
        "operationId": "getMedia",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "API Media",
          "API Pages",
          "APIs"
        ],
        "summary": "Attach a media to an API page ",
        "description": "User must have the API_DOCUMENTATION[UPDATE] permission to use this service",
        "operationId": "attachMedia",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  },
                  "fileName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Media successfully added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/pages/{page}/content": {
      "get": {
        "tags": [
          "API Pages",
          "APIs"
        ],
        "summary": "Get the page's content",
        "description": "User must have the READ permission to use this service",
        "operationId": "getPageContent",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Page's content",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/pages/{page}": {
      "get": {
        "tags": [
          "API Pages",
          "APIs"
        ],
        "summary": "Get a page",
        "description": "User must have the READ permission to use this service",
        "operationId": "getPage",
        "parameters": [
          {
            "name": "Accept-Language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "portal",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "translated",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Page",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "put": {
        "tags": [
          "API Pages",
          "APIs"
        ],
        "summary": "Update a page",
        "description": "User must have the MANAGE_PAGES permission to use this service",
        "operationId": "updatePage",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePageEntity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageEntity"
                }
              }
            }
          },
          "201": {
            "description": "Page successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "page"
      },
      "delete": {
        "tags": [
          "API Pages",
          "APIs"
        ],
        "summary": "Delete a page",
        "description": "User must have the MANAGE_PAGES permission to use this service",
        "operationId": "deletePage",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Page successfully deleted",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "API Pages",
          "APIs"
        ],
        "summary": "Update a page",
        "description": "User must have the MANAGE_PAGES permission to use this service",
        "operationId": "partialUpdatePage",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePageEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageEntity"
                }
              }
            }
          },
          "201": {
            "description": "Page successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "page"
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/pages/{page}/_fetch": {
      "post": {
        "tags": [
          "API Pages",
          "APIs"
        ],
        "summary": "Refresh page by calling the associated fetcher",
        "description": "User must have the MANAGE_PAGES permission to use this service",
        "operationId": "fetchPage",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageEntity"
                }
              }
            }
          },
          "201": {
            "description": "Page successfully refreshed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/pages/_import": {
      "put": {
        "tags": [
          "API Pages",
          "APIs"
        ],
        "summary": "Import pages",
        "description": "User must be ADMIN to use this service",
        "operationId": "updateImportFiles",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImportPageEntity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PageEntity"
                  }
                }
              }
            }
          },
          "201": {
            "description": "Page successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "page"
      },
      "post": {
        "tags": [
          "API Pages",
          "APIs"
        ],
        "summary": "Import pages",
        "description": "User must be ADMIN to use this service",
        "operationId": "importFiles",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImportPageEntity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PageEntity"
                  }
                }
              }
            }
          },
          "201": {
            "description": "Page successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "page"
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/events": {
      "get": {
        "tags": [
          "API Events",
          "APIs"
        ],
        "summary": "Get API's events",
        "description": "User must have the MANAGE_LIFECYCLE permission to use this service",
        "operationId": "events",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "all"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API's events",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/plans": {
      "get": {
        "tags": [
          "API Plans",
          "APIs"
        ],
        "summary": "List plans for an API",
        "description": "List all the plans accessible to the current user.",
        "operationId": "listPlans",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "published"
            }
          },
          {
            "name": "security",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List accessible plans for current user",
            "content": {
              "application/json": {
                "schema": {
                  "uniqueItems": true,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlanEntity"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "API Plans",
          "APIs"
        ],
        "summary": "Create a plan",
        "description": "User must have the MANAGE_PLANS permission to use this service",
        "operationId": "createPlan",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPlanEntity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Plan successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "plan"
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/plans/{plan}": {
      "get": {
        "tags": [
          "API Plans",
          "APIs"
        ],
        "summary": "Get a plan",
        "description": "User must have the READ permission to use this service",
        "operationId": "getPlan",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "plan",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plan information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "put": {
        "tags": [
          "API Plans",
          "APIs"
        ],
        "summary": "Update a plan",
        "description": "User must have the MANAGE_PLANS permission to use this service",
        "operationId": "updatePlan",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "plan",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePlanEntity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Plan successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanEntity"
                }
              }
            }
          },
          "400": {
            "description": "Bad plan format",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "plan"
      },
      "delete": {
        "tags": [
          "API Plans",
          "APIs"
        ],
        "summary": "Delete a plan",
        "description": "User must have the MANAGE_PLANS permission to use this service",
        "operationId": "deletePlan",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "plan",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Plan successfully deleted",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/plans/{plan}/_close": {
      "post": {
        "tags": [
          "API Plans",
          "APIs"
        ],
        "summary": "Close  a plan",
        "description": "User must have the MANAGE_PLANS permission to use this service",
        "operationId": "closePlan",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "plan",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Plan successfully closed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/plans/{plan}/_publish": {
      "post": {
        "tags": [
          "API Plans",
          "APIs"
        ],
        "summary": "Publicly publish plan",
        "description": "User must have the MANAGE_PLANS permission to use this service",
        "operationId": "publishPlan",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "plan",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Plan successfully published",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/plans/{plan}/_depreciate": {
      "post": {
        "tags": [
          "API Plans",
          "APIs"
        ],
        "summary": "Depreciate a plan",
        "description": "User must have the API_PLAN[UPDATE] permission to use this service",
        "operationId": "depreciatePlan",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "plan",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Plan successfully depreciated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/subscriptions": {
      "get": {
        "tags": [
          "API Subscriptions",
          "APIs"
        ],
        "summary": "List subscriptions for the API",
        "description": "User must have the READ_SUBSCRIPTION permission to use this service",
        "operationId": "listApiSubscriptions",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "plan",
            "in": "query",
            "description": "plan",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "application",
            "in": "query",
            "description": "application",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "accepted,pending,paused"
            }
          },
          {
            "name": "api_key",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "Expansion of data to return in subscriptions",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "keys"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paged result of API's subscriptions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "API Subscriptions",
          "APIs"
        ],
        "summary": "Subscribe to a plan",
        "description": "User must have the MANAGE_SUBSCRIPTIONS permission to use this service",
        "operationId": "createSubscription",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "application",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "plan",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Subscription successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/subscriptions/{subscription}/keys": {
      "get": {
        "tags": [
          "API Subscriptions",
          "APIs"
        ],
        "summary": "List all API Keys for a subscription",
        "description": "User must have the MANAGE_API_KEYS permission to use this service",
        "operationId": "listApiKeysForSubscription",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscription",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of API Keys for a subscription",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiKeyEntity"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/subscriptions/{subscription}": {
      "get": {
        "tags": [
          "API Subscriptions",
          "APIs"
        ],
        "summary": "Get a subscription",
        "description": "User must have the MANAGE_PLANS permission to use this service",
        "operationId": "getApiSubscription",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscription",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a subscription",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "404": {
            "description": "Subscription does not exist",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "put": {
        "tags": [
          "API Subscriptions",
          "APIs"
        ],
        "summary": "Update a subscription",
        "description": "User must have the MANAGE_PLANS permission to use this service",
        "operationId": "updateApiSubscription",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscription",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSubscriptionEntity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update a subscription",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "400": {
            "description": "Bad subscription format",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "subscription"
      },
      "post": {
        "tags": [
          "API Subscriptions",
          "APIs"
        ],
        "summary": "Renew an API key",
        "description": "User must have the MANAGE_API_KEYS permission to use this service",
        "operationId": "renewApiKey",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscription",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A new API Key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKeyEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/subscriptions/{subscription}/keys/{key}": {
      "delete": {
        "tags": [
          "API Subscriptions",
          "APIs"
        ],
        "summary": "Revoke an API key",
        "description": "User must have the API_SUBSCRIPTION permission to use this service",
        "operationId": "revokeApiKey_1",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscription",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "API key successfully revoked",
            "content": {}
          },
          "400": {
            "description": "API Key does not correspond to the subscription",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/subscriptions/{subscription}/_process": {
      "post": {
        "tags": [
          "API Subscriptions",
          "APIs"
        ],
        "summary": "Update a subscription",
        "description": "User must have the MANAGE_PLANS permission to use this service",
        "operationId": "processApiSubscription",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscription",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ProcessSubscriptionEntity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update a subscription",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "400": {
            "description": "Bad subscription format",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "subscription"
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/subscriptions/{subscription}/status": {
      "post": {
        "tags": [
          "API Subscriptions",
          "APIs"
        ],
        "summary": "Change the status of a subscription",
        "description": "User must have the MANAGE_PLANS permission to use this service",
        "operationId": "changeSubscriptionStatus",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscription",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "CLOSED",
                "PAUSED",
                "RESUMED"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription status successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "400": {
            "description": "Status changes not authorized",
            "content": {}
          },
          "404": {
            "description": "API subscription does not exist",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/subscriptions/{subscription}/keys/{key}/_reactivate": {
      "post": {
        "tags": [
          "API Subscriptions",
          "APIs"
        ],
        "summary": "Reactivate an API key",
        "description": "User must have the API_SUBSCRIPTION permission to use this service",
        "operationId": "reactivateApiKey",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscription",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "API key successfully reactivated",
            "content": {}
          },
          "400": {
            "description": "API Key does not correspond to the subscription",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/subscriptions/{subscription}/_transfer": {
      "post": {
        "tags": [
          "API Subscriptions",
          "APIs"
        ],
        "summary": "Transfer a subscription",
        "description": "User must have the API_SUBSCRIPTION update permission to use this service",
        "operationId": "transferApiSubscription",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscription",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/TransferSubscriptionEntity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update a subscription",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "400": {
            "description": "Bad subscription format",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "subscription"
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/subscriptions/export": {
      "get": {
        "tags": [
          "API Subscriptions",
          "APIs"
        ],
        "summary": "Export API logs as CSV",
        "operationId": "exportAPILogsAsCSV_1",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "plan",
            "in": "query",
            "description": "plan",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "application",
            "in": "query",
            "description": "application",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "accepted,pending,paused"
            }
          },
          {
            "name": "api_key",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API logs as CSV",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/subscribers": {
      "get": {
        "tags": [
          "API Subscriptions",
          "APIs"
        ],
        "summary": "List subscribers for the API",
        "description": "User must have the MANAGE_SUBSCRIPTIONS permission to use this service",
        "operationId": "listApiSubscribers",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paged result of API subscribers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationEntity"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/metadata/{metadata}": {
      "get": {
        "tags": [
          "API Metadata",
          "APIs"
        ],
        "summary": "A metadata for the given API and metadata id",
        "description": "User must have the API_METADATA[READ] permission to use this service",
        "operationId": "getApiMetadata",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "metadata",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMetadataEntity"
                }
              }
            }
          },
          "404": {
            "description": "Metadata not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "put": {
        "tags": [
          "API Metadata",
          "APIs"
        ],
        "summary": "Update an API metadata",
        "description": "User must have the API_METADATA[UPDATE] permission to use this service",
        "operationId": "update_1",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "metadata",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateApiMetadataEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "API metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMetadataEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "API Metadata",
          "APIs"
        ],
        "summary": "Delete a metadata",
        "description": "User must have the API_METADATA[DELETE] permission to use this service",
        "operationId": "delete_2",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "metadata",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Metadata successfully deleted",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/metadata": {
      "get": {
        "tags": [
          "API Metadata",
          "APIs"
        ],
        "summary": "List metadata for the given API",
        "description": "User must have the API_METADATA[READ] permission to use this service",
        "operationId": "listApiMetadatas",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of metadata",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiMetadataEntity"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "API Metadata",
          "APIs"
        ],
        "summary": "Create an API metadata",
        "description": "User must have the API_METADATA[CREATE] permission to use this service",
        "operationId": "create_1",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewApiMetadataEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "A new API metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMetadataEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/ratings/current": {
      "get": {
        "tags": [
          "API Ratings",
          "APIs"
        ],
        "summary": "Retrieve current rating for an API provided by the authenticated user",
        "operationId": "getByApiAndUser",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RatingEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/ratings/summary": {
      "get": {
        "tags": [
          "API Ratings",
          "APIs"
        ],
        "summary": "Get the rating summary for an API",
        "operationId": "getSummaryByApi",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RatingSummaryEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/ratings/{rating}/answers": {
      "post": {
        "tags": [
          "API Ratings",
          "APIs"
        ],
        "summary": "Create an answer to a rating for an API",
        "description": "User must have the API_RATING_ANSWER[CREATE] permission to use this service",
        "operationId": "createAnswer",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rating",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewRatingAnswerEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RatingEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/ratings/{rating}": {
      "put": {
        "tags": [
          "API Ratings",
          "APIs"
        ],
        "summary": "Update an existing rating for an API",
        "description": "User must have the API_RATING[UPDATE] permission to use this service",
        "operationId": "update_2",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rating",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRatingEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RatingEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "API Ratings",
          "APIs"
        ],
        "summary": "Delete an existing rating for an API",
        "description": "User must have the API_RATING[DELETE] permission to use this service",
        "operationId": "delete_3",
        "parameters": [
          {
            "name": "rating",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/ratings": {
      "get": {
        "tags": [
          "API Ratings",
          "APIs"
        ],
        "summary": "List ratings for an API",
        "operationId": "list_2",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageRatingEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "API Ratings",
          "APIs"
        ],
        "summary": "Create a new rating for an API",
        "description": "User must have the API_RATING[CREATE] permission to use this service",
        "operationId": "create_2",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewRatingEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RatingEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/ratings/{rating}/answers/{answer}": {
      "delete": {
        "tags": [
          "API Ratings",
          "APIs"
        ],
        "summary": "Delete an answer to a rating for an API",
        "description": "User must have the API_RATING_ANSWER[DELETE] permission to use this service",
        "operationId": "delete_4",
        "parameters": [
          {
            "name": "rating",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "answer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/audit": {
      "get": {
        "tags": [
          "API Audits",
          "APIs"
        ],
        "summary": "Retrieve audit logs for the API",
        "description": "User must have the API_AUDIT[READ] permission to use this service",
        "operationId": "list_3",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mgmt",
            "in": "query",
            "description": "true if you only want logs from the management, false if you also want api and application audit logs",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "api",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "application",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "event",
            "in": "query",
            "description": "filter by the name of an event.",
            "schema": {
              "type": "string"
            },
            "example": "APPLICATION_UPDATED, API_CREATED, METADATA_DELETED, ..."
          },
          {
            "name": "from",
            "in": "query",
            "description": "Timestamp used to define the start date of the time window to query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "Timestamp used to define the end date of the time window to query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of elements per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataPageAuditEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/audit/events": {
      "get": {
        "tags": [
          "API Audits",
          "APIs"
        ],
        "summary": "List available audit event type for API",
        "description": "User must have the API_AUDIT[READ] permission to use this service",
        "operationId": "getEvents",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/notificationsettings": {
      "get": {
        "tags": [
          "API Notifications",
          "APIs"
        ],
        "summary": "Get notification settings",
        "operationId": "get_1",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {}
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "put": {
        "tags": [
          "API Notifications",
          "APIs"
        ],
        "summary": "Update portal notification settings",
        "operationId": "update_4",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PortalNotificationConfigEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalNotificationConfigEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "post": {
        "tags": [
          "API Notifications",
          "APIs"
        ],
        "summary": "Create notification settings",
        "operationId": "create_3",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenericNotificationConfigEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/notificationsettings/{notificationId}": {
      "put": {
        "tags": [
          "API Notifications",
          "APIs"
        ],
        "summary": "Update generic notification settings",
        "operationId": "update_3",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "notificationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenericNotificationConfigEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericNotificationConfigEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "API Notifications",
          "APIs"
        ],
        "summary": "Delete notification settings",
        "operationId": "delete_5",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "notificationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/alerts/{alert}": {
      "put": {
        "tags": [
          "API Alerts",
          "APIs"
        ],
        "summary": "Update an alert for an API",
        "description": "User must have the API_ALERT[UPDATE] permission to use this service",
        "operationId": "update_5",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "alert",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAlertTriggerEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Alert successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertTriggerEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "API Alerts",
          "APIs"
        ],
        "summary": "Delete an alert for an API",
        "description": "User must have the API_ALERT[DELETE] permission to use this service",
        "operationId": "delete_6",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "alert",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Alert successfully deleted",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AlertTriggerEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/alerts": {
      "get": {
        "tags": [
          "API Alerts",
          "APIs"
        ],
        "summary": "List alerts of an API",
        "description": "User must have the API_ALERT[READ] permission to use this service",
        "operationId": "list_4",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of alerts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlertTriggerEntity"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "API Alerts",
          "APIs"
        ],
        "summary": "Create an alert for an API",
        "description": "User must have the API_ALERT[CREATE] permission to use this service",
        "operationId": "create_4",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewAlertTriggerEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Alert successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertTriggerEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/alerts/status": {
      "get": {
        "tags": [
          "API Alerts",
          "APIs"
        ],
        "summary": "Get alerting status",
        "description": "User must have the MANAGEMENT_ALERT[READ] permission to use this service",
        "operationId": "status",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Alerting status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertStatusEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/alerts/{alert}/events": {
      "get": {
        "tags": [
          "API Alerts",
          "APIs"
        ],
        "summary": "Retrieve the list of events for an alert",
        "description": "User must have the MANAGEMENT_ALERT[READ] permission to use this service",
        "operationId": "listEvents",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "alert",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of events",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/quality-rules/{qualityRule}": {
      "put": {
        "tags": [
          "API Quality",
          "APIs"
        ],
        "summary": "Update an existing quality rules for an API",
        "description": "User must have the API_QUALITY_RULE[UPDATE] permission to use this service",
        "operationId": "update_6",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "qualityRule",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateApiQualityRuleEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiQualityRuleEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/quality-rules": {
      "get": {
        "tags": [
          "API Quality",
          "APIs"
        ],
        "summary": "List quality rules for an API",
        "description": "User must have the API_QUALITY_RULE[READ] permission to use this service",
        "operationId": "list_5",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiQualityRuleEntity"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "API Quality",
          "APIs"
        ],
        "summary": "Create a new quality rules for an API",
        "description": "User must have the API_QUALITY_RULE[CREATE] permission to use this service",
        "operationId": "create_5",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewApiQualityRuleEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiQualityRuleEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/messages": {
      "post": {
        "tags": [
          "APIs"
        ],
        "summary": "Send a message to existing consumers of an API",
        "description": "User must have the API_MESSAGE[CREATE] permission to use this service",
        "operationId": "create_6",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/picture": {
      "get": {
        "tags": [
          "APIs"
        ],
        "summary": "Get the API's picture",
        "description": "User must have the READ permission to use this service",
        "operationId": "picture",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API's picture",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/background": {
      "get": {
        "tags": [
          "APIs"
        ],
        "summary": "Get the API's background",
        "description": "User must have the READ permission to use this service",
        "operationId": "background",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API's background",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/rollback": {
      "post": {
        "tags": [
          "APIs"
        ],
        "summary": "Rollback API to a previous version",
        "description": "User must have the MANAGE_LIFECYCLE permission to use this service",
        "operationId": "rollback",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/UpdateApiEntity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API successfully rollbacked",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "api"
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/import-path-mappings": {
      "post": {
        "tags": [
          "APIs"
        ],
        "summary": "Import path mappings from a page",
        "description": "User must have the MANAGE_API permission to use this service",
        "operationId": "importPathMappingsFromPage",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Path mappings successfully imported",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/headers": {
      "get": {
        "tags": [
          "APIs"
        ],
        "summary": "Get the portal API headers values",
        "operationId": "getHeaders",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiHeaderEntity"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis": {
      "get": {
        "tags": [
          "APIs"
        ],
        "summary": "List APIs",
        "description": "List all the APIs accessible to the current user or only public APIs for non authenticated users.",
        "operationId": "listApis",
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "description": "filter by category id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "group",
            "in": "query",
            "description": "filter by group id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "true if you only want Top APIs. default: false",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "context-path",
            "in": "query",
            "description": "filter by context path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "label",
            "in": "query",
            "description": "filter by label",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "filter by state: STARTED or STOPPED",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "visibility",
            "in": "query",
            "description": "filter by visibility: PUBLIC or PRIVATE",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "filter by version",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "filter by full API Name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tag",
            "in": "query",
            "description": "filter by tag",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "portal",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List accessible APIs for current user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiListItem"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "APIs"
        ],
        "summary": "Create an API",
        "description": "User must have API_PUBLISHER or ADMIN role to create an API.",
        "operationId": "createApi",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewApiEntity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "API successfully created",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "api"
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/import": {
      "post": {
        "tags": [
          "APIs"
        ],
        "summary": "Create an API by importing an API definition",
        "description": "Create an API by importing an existing API definition in JSON format",
        "operationId": "importDefinition",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API successfully created",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "definition"
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/import/swagger": {
      "post": {
        "tags": [
          "APIs"
        ],
        "summary": "Create an API definition from a Swagger descriptor",
        "operationId": "importSwagger",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ImportSwaggerDescriptorEntity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API definition from Swagger descriptor",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "swagger"
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/media/upload": {
      "post": {
        "tags": [
          "API Media",
          "APIs"
        ],
        "summary": "Create a media for an API",
        "description": "User must have the API_DOCUMENTATION[CREATE] permission to use this service",
        "operationId": "uploadImage",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Media successfully created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PageEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/{api}/media/{hash}": {
      "get": {
        "tags": [
          "API Media",
          "APIs"
        ],
        "summary": "Retrieve a media for an API",
        "operationId": "getImage",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hash",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/hooks": {
      "get": {
        "tags": [
          "APIs"
        ],
        "summary": "Get the list of available hooks",
        "operationId": "getHooks",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Hook"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/apis/verify": {
      "post": {
        "tags": [
          "APIs"
        ],
        "summary": "Check if an API match the following criteria",
        "operationId": "verify",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyApiParam"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "No API match the following criteria",
            "content": {}
          },
          "400": {
            "description": "API already exist with the following criteria",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/environments/{envId}/applications": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "List all the applications accessible to authenticated user",
        "description": "User must have MANAGEMENT_APPLICATION[READ] and PORTAL_APPLICATION[READ] permission to list applications.",
        "operationId": "listApplications",
        "parameters": [
          {
            "name": "group",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User's applications",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationEntity"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Applications"
        ],
        "summary": "Create an application",
        "description": "User must have MANAGEMENT_APPLICATION[CREATE] permission to create an application.",
        "operationId": "createApplication",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewApplicationEntity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Application successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "application"
      }
    },
    "/organizations/{orgId}/environments/{envId}/applications/hooks": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get the list of available hooks",
        "operationId": "getHooks_1",
        "responses": {
          "200": {
            "description": "List of hooks",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/applications/{application}": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get an application",
        "description": "User must have the READ permission to use this service",
        "operationId": "getApplication",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Application",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Applications"
        ],
        "summary": "Update an application",
        "description": "User must have APPLICATION_DEFINITION[UPDATE] permission to update an application.",
        "operationId": "updateApplication",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateApplicationEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Updated application",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Applications"
        ],
        "summary": "Delete an application",
        "description": "User must have the DELETE permission to use this service",
        "operationId": "deleteApplication",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Application successfully deleted",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/applications/{application}/members": {
      "get": {
        "tags": [
          "Application Memberships",
          "Applications"
        ],
        "summary": "List application members",
        "description": "User must have the READ permission to use this service",
        "operationId": "listApplicationMembers",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Application successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MembershipListItem"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Application Memberships",
          "Applications"
        ],
        "summary": "Add or update an application member",
        "description": "User must have the MANAGE_MEMBERS permission to use this service",
        "operationId": "addOrUpdateApplicationMember",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationMembership"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "Member has been added or updated successfully",
            "content": {}
          },
          "400": {
            "description": "Membership parameter is not valid",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Application Memberships",
          "Applications"
        ],
        "summary": "Remove an application member",
        "description": "User must have the MANAGE_MEMBERS permission to use this service",
        "operationId": "deleteApplicationMember",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Member has been removed successfully",
            "content": {}
          },
          "400": {
            "description": "User does not exist",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/applications/{application}/members/transfer_ownership": {
      "post": {
        "tags": [
          "Application Memberships",
          "Applications"
        ],
        "summary": "Transfer the ownership of the APPLICATION",
        "description": "User must have the TRANSFER_OWNERSHIP permission to use this service",
        "operationId": "transferOwnership_1",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/TransferOwnership"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Ownership has been transferred successfully",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/environments/{envId}/applications/{application}/members/permissions": {
      "get": {
        "tags": [
          "Application Memberships",
          "Applications"
        ],
        "summary": "Get application members",
        "description": "User must have the APPLICATION_MEMBER permission to use this service",
        "operationId": "getPermissions_1",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Application member's permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MemberEntity"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/applications/{application}/subscriptions": {
      "get": {
        "tags": [
          "Application Subscriptions",
          "Applications"
        ],
        "summary": "List subscriptions for the application",
        "description": "User must have the READ_SUBSCRIPTION permission to use this service",
        "operationId": "listApplicationSubscriptions",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "plan",
            "in": "query",
            "description": "plan",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "api",
            "in": "query",
            "description": "api",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "accepted,pending,paused"
            }
          },
          {
            "name": "api_key",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "Expansion of data to return in subscriptions",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "keys"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paged result of application's subscriptions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Application Subscriptions",
          "Applications"
        ],
        "summary": "Subscribe to a plan",
        "description": "User must have the MANAGE_SUBSCRIPTIONS permission to use this service",
        "operationId": "createSubscription_1",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "plan",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/NewSubscriptionEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "Subscription successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/environments/{envId}/applications/{application}/subscriptions/{subscription}": {
      "get": {
        "tags": [
          "Application Subscriptions",
          "Applications"
        ],
        "summary": "Get subscription information",
        "description": "User must have the READ permission to use this service",
        "operationId": "getSubscription",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscription",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Application Subscriptions",
          "Applications"
        ],
        "summary": "Renew an API key",
        "description": "User must have the MANAGE_API_KEYS permission to use this service",
        "operationId": "renewApiKey_1",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscription",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A new API Key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKeyEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Application Subscriptions",
          "Applications"
        ],
        "summary": "Close the subscription",
        "description": "User must have the APPLICATION_SUBSCRIPTION[DELETE] permission to use this service",
        "operationId": "closeSubscription",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscription",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription has been closed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/applications/{application}/subscriptions/{subscription}/keys": {
      "get": {
        "tags": [
          "Application Subscriptions",
          "Applications"
        ],
        "summary": "List all API Keys for a subscription",
        "description": "User must have the READ permission to use this service",
        "operationId": "listApiKeysForSubscription_1",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscription",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of API Keys for a subscription",
            "content": {
              "application/json": {
                "schema": {
                  "uniqueItems": true,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiKeyEntity"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/applications/{application}/subscriptions/{subscription}/keys/{key}": {
      "delete": {
        "tags": [
          "Application Subscriptions",
          "Applications"
        ],
        "summary": "Revoke an API key",
        "description": "User must have the MANAGE_API_KEYS permission to use this service",
        "operationId": "revokeApiKey_2",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscription",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "API key successfully revoked",
            "content": {}
          },
          "400": {
            "description": "API Key does not correspond to the subscription",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/applications/{application}/subscribed": {
      "get": {
        "tags": [
          "Application Subscriptions",
          "Applications"
        ],
        "summary": "List APIs subscribed by the application",
        "description": "User must have the APPLICATION_SUBSCRIPTION permission to use this service",
        "operationId": "listApiSubscribed",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paged result of subscribed APIs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationEntity"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/applications/{application}/analytics": {
      "get": {
        "tags": [
          "Application Analytics",
          "Applications"
        ],
        "summary": "Get application analytics",
        "description": "User must have the APPLICATION_ANALYTICS[READ] permission to use this service",
        "operationId": "hits_1",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Timestamp used to define the start date of the time window to query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "Timestamp used to define the end date of the time window to query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "interval",
            "in": "query",
            "description": "The time interval when getting histogram data (in milliseconds)",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 600000
          },
          {
            "name": "query",
            "in": "query",
            "description": "The Lucene query used to filter data",
            "schema": {
              "type": "string"
            },
            "example": "api:xxxx-xxxx-xxxx-xxxx AND plan:yyyy-yyyy-yyyy-yyyy AND host:\"demo.gravitee.io\" AND path:/test"
          },
          {
            "name": "field",
            "in": "query",
            "description": "The field to query when doing `group_by` queries",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The number of data to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The type of data to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "group_by",
                "date_histo",
                "count"
              ]
            }
          },
          {
            "name": "ranges",
            "in": "query",
            "description": "Ranges allows you to group field's data. Mainly used to group HTTP statuses code with `group_by` queries",
            "schema": {
              "type": "string"
            },
            "example": "100:199;200:299;300:399;400:499;500:599"
          },
          {
            "name": "order",
            "in": "query",
            "description": "The field used to sort results. Can be asc or desc (prefix with minus '-') ",
            "schema": {
              "type": "string"
            },
            "example": "order:-response-time"
          }
        ],
        "responses": {
          "200": {
            "description": "Application analytics",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/applications/{application}/logs": {
      "get": {
        "tags": [
          "Application Logs",
          "Applications"
        ],
        "summary": "Get application logs",
        "operationId": "applicationLogs",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Timestamp used to define the start date of the time window to query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "Timestamp used to define the end date of the time window to query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "The expresion used to search for logs. It looks like 'transaction:123-456-789 AND uri=\\\\/path\\\\/to\\\\/resource* AND response-time:[100 TO 200]'. Reserved characters that must be escaped + - = && || > < ! ( ) { } [ ] ^ \" ~ * ? : \\ /",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The number of data to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "field",
            "in": "query",
            "description": "The field to query when doing `group_by` queries",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "true means ASC order, false means DESC",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Application logs",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/applications/{application}/logs/export": {
      "get": {
        "tags": [
          "Application Logs",
          "Applications"
        ],
        "summary": "Export application logs as CSV",
        "operationId": "exportApplicationLogsAsCSV",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Timestamp used to define the start date of the time window to query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "Timestamp used to define the end date of the time window to query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "The expresion used to search for logs. It looks like 'transaction:123-456-789 AND uri=\\\\/path\\\\/to\\\\/resource* AND response-time:[100 TO 200]'. Reserved characters that must be escaped + - = && || > < ! ( ) { } [ ] ^ \" ~ * ? : \\ /",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The number of data to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "field",
            "in": "query",
            "description": "The field to query when doing `group_by` queries",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "true means ASC order, false means DESC",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Application logs as CSV",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/applications/{application}/logs/{log}": {
      "get": {
        "tags": [
          "Application Logs",
          "Applications"
        ],
        "summary": "Get a specific log",
        "operationId": "applicationLog",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "log",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timestamp",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Single log",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/applications/{application}/alerts/{alert}": {
      "put": {
        "tags": [
          "Application Alerts",
          "Applications"
        ],
        "summary": "Update an alert for an application",
        "description": "User must have the APPLICATION_ALERT[UPDATE] permission to use this service",
        "operationId": "update_8",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "alert",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAlertTriggerEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Alert successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertTriggerEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Application Alerts",
          "Applications"
        ],
        "summary": "Delete an alert for an application",
        "description": "User must have the APPLICATION_ALERT[DELETE] permission to use this service",
        "operationId": "delete_8",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "alert",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Alert successfully deleted",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AlertTriggerEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/applications/{application}/alerts": {
      "get": {
        "tags": [
          "Application Alerts",
          "Applications"
        ],
        "summary": "List configured alerts of an application",
        "description": "User must have the APPLICATION_ALERT[READ] permission to use this service",
        "operationId": "list_6",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of alerts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlertTriggerEntity"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Application Alerts",
          "Applications"
        ],
        "summary": "Create an alert for an application",
        "description": "User must have the APPLICATION_ALERT[CREATE] permission to use this service",
        "operationId": "create_7",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewAlertTriggerEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Alert successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertTriggerEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/environments/{envId}/applications/{application}/alerts/status": {
      "get": {
        "tags": [
          "Application Alerts",
          "Applications"
        ],
        "summary": "Get alerting status",
        "description": "User must have the MANAGEMENT_ALERT[READ] permission to use this service",
        "operationId": "status_1",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Alerting status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertStatusEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/applications/{application}/metadata/{metadata}": {
      "get": {
        "tags": [
          "Application Metadata",
          "Applications"
        ],
        "summary": "A metadata for an application and metadata id",
        "description": "User must have the APPLICATION_METADATA[READ] permission to use this service",
        "operationId": "getApplicationMetadata",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "metadata",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationMetadataEntity"
                }
              }
            }
          },
          "404": {
            "description": "Metadata not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Application Metadata",
          "Applications"
        ],
        "summary": "Update an application metadata",
        "description": "User must have the APPLICATION_METADATA[UPDATE] permission to use this service",
        "operationId": "update_9",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "metadata",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateApplicationMetadataEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Updated application metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationMetadataEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Application Metadata",
          "Applications"
        ],
        "summary": "Delete a metadata",
        "description": "User must have the APPLICATION_METADATA[DELETE] permission to use this service",
        "operationId": "delete_9",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "metadata",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Metadata successfully deleted",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/applications/{application}/metadata": {
      "get": {
        "tags": [
          "Application Metadata",
          "Applications"
        ],
        "summary": "List metadata for an application",
        "description": "User must have the APPLICATION_METADATA[READ] permission to use this service",
        "operationId": "listApplicationMetadatas",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of metadata for an application",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationMetadataEntity"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Application Metadata",
          "Applications"
        ],
        "summary": "Create an application metadata",
        "description": "User must have the APPLICATION_METADATA[CREATE] permission to use this service",
        "operationId": "create_8",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewApplicationMetadataEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "Application metadata successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationMetadataEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/environments/{envId}/applications/{application}/notifiers": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "List available notifiers for application",
        "description": "User must have the APPLICATION_NOTIFICATION[READ] permission to use this service",
        "operationId": "getNotifiers_1",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "LList of notifiers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotifierEntity"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/applications/{application}/notificationsettings": {
      "get": {
        "tags": [
          "Application Notifications",
          "Applications"
        ],
        "summary": "Get notification settings",
        "operationId": "get_3",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {}
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Application Notifications",
          "Applications"
        ],
        "summary": "Update portal notification settings",
        "operationId": "update_11",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PortalNotificationConfigEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalNotificationConfigEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "post": {
        "tags": [
          "Application Notifications",
          "Applications"
        ],
        "summary": "Create notification settings",
        "operationId": "create_9",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenericNotificationConfigEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/environments/{envId}/applications/{application}/notificationsettings/{notificationId}": {
      "put": {
        "tags": [
          "Application Notifications",
          "Applications"
        ],
        "summary": "Update generic notification settings",
        "operationId": "update_10",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "notificationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenericNotificationConfigEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericNotificationConfigEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Application Notifications",
          "Applications"
        ],
        "summary": "Delete notification settings",
        "operationId": "delete_10",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "notificationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/applications/{application}/configuration": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get application type definition of an application",
        "description": "User must have the READ permission to use this service",
        "operationId": "getApplicationType",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ApplicationType",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "SIMPLE",
                    "BROWSER",
                    "WEB",
                    "NATIVE",
                    "BACKEND_TO_BACKEND"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/applications/{application}/renew_secret": {
      "post": {
        "tags": [
          "Applications"
        ],
        "summary": "Renew the client secret for an OAuth2 application",
        "description": "User must have APPLICATION_DEFINITION[UPDATE] permission to update an application.",
        "operationId": "renewClientSecret",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated application",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/applications/{application}/picture": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get the application's picture",
        "description": "User must have the READ permission to use this service",
        "operationId": "picture_1",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Application's picture",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/applications/{application}/background": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get the application's background",
        "description": "User must have the READ permission to use this service",
        "operationId": "background_1",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Application's background",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/dashboards/{dashboardId}": {
      "get": {
        "tags": [
          "Dashboards",
          "Configuration"
        ],
        "summary": "Retrieve a platform dashboard",
        "description": "User must have the MANAGEMENT_DASHBOARD[READ] permission to use this service",
        "operationId": "get_4",
        "parameters": [
          {
            "name": "dashboardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Platform dashboard",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Dashboards",
          "Configuration"
        ],
        "summary": "Update a platform dashboard",
        "description": "User must have the MANAGEMENT_DASHBOARD[UPDATE] permission to use this service",
        "operationId": "update_12",
        "parameters": [
          {
            "name": "dashboardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDashboardEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Updated dashboard",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Dashboards",
          "Configuration"
        ],
        "summary": "Delete a platform dashboard",
        "description": "User must have the MANAGEMENT_DASHBOARD[DELETE] permission to use this service",
        "operationId": "delete_11",
        "parameters": [
          {
            "name": "dashboardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Dashboard successfully deleted",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/dashboards": {
      "get": {
        "tags": [
          "Dashboards",
          "Configuration"
        ],
        "summary": "Retrieve the list of platform dashboards",
        "operationId": "list_7",
        "parameters": [
          {
            "name": "reference_type",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "PLATFORM",
                "API",
                "APPLICATION"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of platform dashboards",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DashboardEntity"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Dashboards",
          "Configuration"
        ],
        "summary": "Create a platform dashboard",
        "description": "User must have the MANAGEMENT_DASHBOARD[CREATE] permission to use this service",
        "operationId": "create_10",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewDashboardEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardEntity"
                }
              }
            }
          },
          "201": {
            "description": "Dashboard successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/identities": {
      "get": {
        "tags": [
          "Configuration",
          "Identity Providers"
        ],
        "summary": "Get the list of identity providers",
        "description": "User must have the ORGANIZATION_IDENTITY_PROVIDER[READ] permission to use this service",
        "operationId": "listIdentityProviders_1",
        "responses": {
          "200": {
            "description": "List identity providers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdentityProviderListItem"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Configuration",
          "Identity Providers"
        ],
        "summary": "Create an identity provider",
        "description": "User must have the ORGANIZATION_IDENTITY_PROVIDER[CREATE] permission to use this service",
        "operationId": "createIdentityProvider_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewIdentityProviderEntity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Identity provider successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProviderEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "identity-provider"
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/identities/{identityProvider}": {
      "get": {
        "tags": [
          "Configuration",
          "Identity Providers"
        ],
        "summary": "Get an identity provider",
        "description": "User must have the ORGANIZATION_IDENTITY_PROVIDER[READ] permission to use this service",
        "operationId": "getIdentityProvider_1",
        "parameters": [
          {
            "name": "identityProvider",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An identity provider",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Configuration",
          "Identity Providers"
        ],
        "summary": "Update an identity provider",
        "description": "User must have the ORGANIZATION_IDENTITY_PROVIDER[UPDATE] permission to use this service",
        "operationId": "updateIdentityProvider_1",
        "parameters": [
          {
            "name": "identityProvider",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIdentityProviderEntity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated identity provider",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProviderEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "dictionary"
      },
      "delete": {
        "tags": [
          "Configuration",
          "Identity Providers"
        ],
        "summary": "Delete an identity provider",
        "description": "User must have the ORGANIZATION_IDENTITY_PROVIDER[DELETE] permission to use this service",
        "operationId": "deleteIdentityProvider_1",
        "parameters": [
          {
            "name": "identityProvider",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Identity provider successfully deleted",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/rolescopes/{scope}/roles/{role}/users": {
      "get": {
        "tags": [
          "Roles",
          "Configuration"
        ],
        "summary": "List users with the given role",
        "description": "User must have the MANAGEMENT_ROLE[READ] permission to use this service",
        "operationId": "listUsersPerRole_1",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "API",
                "APPLICATION",
                "GROUP",
                "ENVIRONMENT",
                "ORGANIZATION",
                "PLATFORM"
              ]
            }
          },
          {
            "name": "role",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MembershipListItem"
                  }
                }
              }
            }
          },
          "204": {
            "description": "List of user's memberships",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MembershipListItem"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Roles",
          "Configuration"
        ],
        "summary": "Add or update a role for a user",
        "description": "User must have the MANAGEMENT_ROLE[CREATE] and MANAGEMENT_ROLE[UPDATE] permission to use this service",
        "operationId": "addRoleToUser_1",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ORGANIZATION",
                "ENVIRONMENT"
              ]
            }
          },
          {
            "name": "role",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleMembership"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "Membership successfully created / updated",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/rolescopes/{scope}/roles/{role}/users/{userId}": {
      "delete": {
        "tags": [
          "Roles",
          "Configuration"
        ],
        "summary": "Delete the role for a given user",
        "description": "User must have the MANAGEMENT_ROLE[DELETE] permission to use this service",
        "operationId": "delete_12",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "API",
                "APPLICATION",
                "GROUP",
                "ENVIRONMENT",
                "ORGANIZATION",
                "PLATFORM"
              ]
            }
          },
          {
            "name": "role",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Role successfully removed",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/rolescopes/{scope}/roles/{role}": {
      "get": {
        "tags": [
          "Roles",
          "Configuration"
        ],
        "summary": "Get a role",
        "description": "User must have the MANAGEMENT_ROLE[READ] permission to use this service",
        "operationId": "get_5",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "API",
                "APPLICATION",
                "GROUP",
                "ENVIRONMENT",
                "ORGANIZATION",
                "PLATFORM"
              ]
            }
          },
          {
            "name": "role",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleEntity"
                }
              }
            }
          },
          "404": {
            "description": "Role not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Roles",
          "Configuration"
        ],
        "summary": "Update a role",
        "description": "User must have the MANAGEMENT_ROLE[UPDATE] permission to use this service",
        "operationId": "update_13",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "API",
                "APPLICATION",
                "GROUP",
                "ENVIRONMENT",
                "ORGANIZATION",
                "PLATFORM"
              ]
            }
          },
          {
            "name": "role",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Role successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleEntity"
                }
              }
            }
          },
          "404": {
            "description": "Role not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Roles",
          "Configuration"
        ],
        "summary": "Delete a role",
        "description": "User must have the MANAGEMENT_ROLE[DELETE] permission to use this service",
        "operationId": "delete_13",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "API",
                "APPLICATION",
                "GROUP",
                "ENVIRONMENT",
                "ORGANIZATION",
                "PLATFORM"
              ]
            }
          },
          {
            "name": "role",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Role successfully deleted",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RoleEntity"
                }
              }
            }
          },
          "404": {
            "description": "Role not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/rolescopes/{scope}/roles": {
      "get": {
        "tags": [
          "Roles",
          "Configuration"
        ],
        "summary": "List of roles",
        "description": "User must have the MANAGEMENT_ROLE[READ] permission to use this service",
        "operationId": "list_8",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "API",
                "APPLICATION",
                "GROUP",
                "ENVIRONMENT",
                "ORGANIZATION",
                "PLATFORM"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Role successfully removed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleEntity"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Roles",
          "Configuration"
        ],
        "summary": "Create a role",
        "description": "User must have the MANAGEMENT_ROLE[CREATE] permission to use this service",
        "operationId": "create_11",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "API",
                "APPLICATION",
                "GROUP",
                "ENVIRONMENT",
                "ORGANIZATION",
                "PLATFORM"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewRoleEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Role successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/rolescopes": {
      "get": {
        "tags": [
          "Roles",
          "Configuration"
        ],
        "summary": "List availables role scopes",
        "operationId": "list_9",
        "responses": {
          "200": {
            "description": "List of role scopes",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/groups/{group}/memberships": {
      "get": {
        "tags": [
          "Groups",
          "Configuration"
        ],
        "summary": "List APIs or applications linked to this group",
        "operationId": "getMemberships_1",
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Groups",
          "Configuration"
        ],
        "summary": "Associate a group to existing APIs or Applications",
        "operationId": "associate",
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/groups/{group}": {
      "get": {
        "tags": [
          "Groups",
          "Configuration"
        ],
        "summary": "Get a group",
        "operationId": "get_6",
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group definition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Groups",
          "Configuration"
        ],
        "summary": "Update an existing group",
        "operationId": "update_14",
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGroupEntity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Group successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "group"
      },
      "delete": {
        "tags": [
          "Groups",
          "Configuration"
        ],
        "summary": "Delete an existing group",
        "operationId": "delete_14",
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Group successfully deleted",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/groups/{group}/members": {
      "get": {
        "tags": [
          "Group Memberships",
          "Groups",
          "Configuration"
        ],
        "summary": "List group members",
        "operationId": "getMembers",
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of group's members",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MemberEntity"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Group Memberships",
          "Groups",
          "Configuration"
        ],
        "summary": "Add or update a group member",
        "operationId": "addOrUpdateMember",
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupMembership"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Member has been updated",
            "content": {}
          },
          "201": {
            "description": "Member has been added",
            "content": {}
          },
          "400": {
            "description": "Membership is not valid",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/groups/{group}/members/{member}": {
      "delete": {
        "tags": [
          "Group Memberships",
          "Groups",
          "Configuration"
        ],
        "summary": "Remove a group member",
        "operationId": "deleteMember",
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "member",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Member has been removed successfully",
            "content": {}
          },
          "400": {
            "description": "User does not exist",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/groups/{group}/invitations/{invitation}": {
      "put": {
        "tags": [
          "Group Invitations",
          "Groups",
          "Configuration"
        ],
        "summary": "Update an invitation to join a group",
        "description": "User must have the GROUP_INVITATION[UPDATE] permission to use this service",
        "operationId": "update_15",
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invitation",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInvitationEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvitationEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Group Invitations",
          "Groups",
          "Configuration"
        ],
        "summary": "Delete an invitation to join a group",
        "description": "User must have the GROUP_INVITATION[DELETE] permission to use this service",
        "operationId": "delete_15",
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invitation",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/groups/{group}/invitations": {
      "get": {
        "tags": [
          "Group Invitations",
          "Groups",
          "Configuration"
        ],
        "summary": "List existing invitations of a group",
        "description": "User must have the GROUP_INVITATION[READ] permission to use this service",
        "operationId": "list_10",
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvitationEntity"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Group Invitations",
          "Groups",
          "Configuration"
        ],
        "summary": "Create an invitation to join a group",
        "description": "User must have the GROUP_INVITATION[CREATE] permission to use this service",
        "operationId": "create_12",
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewInvitationEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvitationEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/groups": {
      "get": {
        "tags": [
          "Groups",
          "Configuration"
        ],
        "summary": "Find groups",
        "description": "Find all groups, or a specific type of groups.Only administrators could see all groups.Only users with MANAGE_API permissions could see API groups.",
        "operationId": "findAll_1",
        "responses": {
          "200": {
            "description": "List of groups",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupEntity"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Groups",
          "Configuration"
        ],
        "summary": "Create group",
        "description": "Create a new group.",
        "operationId": "createGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewGroupEntity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Group successfully created",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "group"
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/tags/{tag}": {
      "get": {
        "tags": [
          "Sharding Tags",
          "Configuration"
        ],
        "summary": "Get a sharding tag",
        "description": "User must have the MANAGEMENT_TAG[READ] permission to use this service",
        "operationId": "getTag",
        "parameters": [
          {
            "name": "tag",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Sharding Tags",
          "Configuration"
        ],
        "summary": "Update an existing sharding tag",
        "description": "User must have the MANAGEMENT_TAG[UPDATE] permission to use this service",
        "operationId": "update_16",
        "parameters": [
          {
            "name": "tag",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTagEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Sharding tag",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Sharding Tags",
          "Configuration"
        ],
        "summary": "Delete an existing sharding tag",
        "description": "User must have the MANAGEMENT_TAG[DELETE] permission to use this service",
        "operationId": "delete_16",
        "parameters": [
          {
            "name": "tag",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Sharding tag successfully deleted",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/tags": {
      "get": {
        "tags": [
          "Sharding Tags",
          "Configuration"
        ],
        "summary": "List sharding tags",
        "operationId": "list_11",
        "responses": {
          "200": {
            "description": "List of sharding tags",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagEntity"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Sharding Tags",
          "Configuration"
        ],
        "summary": "Create a sharding tag",
        "description": "User must have the MANAGEMENT_TAG[CREATE] permission to use this service",
        "operationId": "create_13",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewTagEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagEntity"
                }
              }
            }
          },
          "201": {
            "description": "A new sharding tag",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/tenants": {
      "get": {
        "tags": [
          "Tenants",
          "Configuration"
        ],
        "summary": "List tenants",
        "operationId": "list_12",
        "responses": {
          "200": {
            "description": "List of tenants",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TenantEntity"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Tenants",
          "Configuration"
        ],
        "summary": "Update a tenant",
        "description": "User must have the MANAGEMENT_TENANT[UPDATE] permission to use this service",
        "operationId": "update_17",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpdateTenantEntity"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "List of tenants",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TenantEntity"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "post": {
        "tags": [
          "Tenants",
          "Configuration"
        ],
        "summary": "Create a tenant",
        "description": "User must have the MANAGEMENT_TENANT[CREATE] permission to use this service",
        "operationId": "create_14",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NewTenantEntity"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "List of tenants",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TenantEntity"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/tenants/{tenant}": {
      "delete": {
        "tags": [
          "Tenants",
          "Configuration"
        ],
        "summary": "Delete a tenant",
        "description": "User must have the MANAGEMENT_TENANT[DELETE] permission to use this service",
        "operationId": "delete_17",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of tenants",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TenantEntity"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/metadata": {
      "get": {
        "tags": [
          "Metadata",
          "Configuration"
        ],
        "summary": "Retrieve the list of platform metadata",
        "description": "User must have the PORTAL_METADATA[READ] permission to use this service",
        "operationId": "list_13",
        "responses": {
          "200": {
            "description": "List of platform metadata",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MetadataEntity"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Metadata",
          "Configuration"
        ],
        "summary": "Update a platform metadata",
        "description": "User must have the PORTAL_METADATA[UPDATE] permission to use this service",
        "operationId": "update_18",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMetadataEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Updated metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "post": {
        "tags": [
          "Metadata",
          "Configuration"
        ],
        "summary": "Create a platform metadata",
        "description": "User must have the PORTAL_METADATA[CREATE] permission to use this service",
        "operationId": "create_15",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewMetadataEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataEntity"
                }
              }
            }
          },
          "201": {
            "description": "Metadata successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/metadata/{metadata}": {
      "delete": {
        "tags": [
          "Metadata",
          "Configuration"
        ],
        "summary": "Delete a platform metadata",
        "description": "User must have the PORTAL_METADATA[DELETE] permission to use this service",
        "operationId": "delete_18",
        "parameters": [
          {
            "name": "metadata",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Metadata successfully deleted",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/top-apis": {
      "get": {
        "tags": [
          "Top APIs",
          "Configuration"
        ],
        "summary": "List of top APIs",
        "description": "User must have the PORTAL_TOP_APIS[READ] permission to use this service",
        "operationId": "list_14",
        "responses": {
          "200": {
            "description": "List of top APIs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TopApiEntity"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Top APIs",
          "Configuration"
        ],
        "summary": "Update a top API",
        "description": "User must have the PORTAL_TOP_APIS[UPDATE] permission to use this service",
        "operationId": "update_19",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpdateTopApiEntity"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "List of top APIs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TopApiEntity"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "post": {
        "tags": [
          "Top APIs",
          "Configuration"
        ],
        "summary": "Create a top API",
        "description": "User must have the PORTAL_TOP_APIS[CREATE] permission to use this service",
        "operationId": "create_16",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewTopApiEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "List of top APIs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TopApiEntity"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/top-apis/{topAPI}": {
      "delete": {
        "tags": [
          "Top APIs",
          "Configuration"
        ],
        "summary": "Delete an existing top API",
        "description": "User must have the PORTAL_TOP_APIS[DELETE] permission to use this service",
        "operationId": "delete_19",
        "parameters": [
          {
            "name": "topAPI",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Top API successfully deleted",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/plans": {
      "get": {
        "tags": [
          "Plans",
          "Configuration"
        ],
        "summary": "List of available plan's type",
        "operationId": "getConfiguration",
        "responses": {
          "200": {
            "description": "List of plans",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlansConfigurationEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/dictionaries": {
      "get": {
        "tags": [
          "Configuration",
          "Dictionaries"
        ],
        "summary": "Get the list of global dictionaries",
        "description": "User must have the DICTIONARY[READ] permission to use this service",
        "operationId": "listDictionaries",
        "responses": {
          "200": {
            "description": "List global dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DictionaryListItem"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Configuration",
          "Dictionaries"
        ],
        "summary": "Create a dictionary",
        "description": "User must have the DICTIONARY[CREATE] permission to use this service",
        "operationId": "createDictionary",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewDictionaryEntity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Dictionary successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DictionaryEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "dictionary"
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/dictionaries/{dictionary}": {
      "get": {
        "tags": [
          "Configuration",
          "Dictionaries"
        ],
        "summary": "Get a dictionary",
        "description": "User must have the DICTIONARY[READ] permission to use this service",
        "operationId": "getDictionary",
        "parameters": [
          {
            "name": "dictionary",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A dictionary",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Configuration",
          "Dictionaries"
        ],
        "summary": "Update a dictionary",
        "description": "User must have the DICTIONARY[UPDATE] permission to use this service",
        "operationId": "updateDictionary",
        "parameters": [
          {
            "name": "dictionary",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDictionaryEntity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DictionaryEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "dictionary"
      },
      "post": {
        "tags": [
          "Configuration",
          "Dictionaries"
        ],
        "summary": "Manage the dictionary's lifecycle",
        "description": "User must have the DICTIONARY[LIFECYCLE] permission to use this service",
        "operationId": "doLifecycleAction_1",
        "parameters": [
          {
            "name": "action",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "START",
                "STOP"
              ]
            }
          },
          {
            "name": "dictionary",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dictionary state updated",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Configuration",
          "Dictionaries"
        ],
        "summary": "Delete a dictionary",
        "description": "User must have the DICTIONARY[DELETE] permission to use this service",
        "operationId": "deleteDictionary",
        "parameters": [
          {
            "name": "dictionary",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Dictionary successfully deleted",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/dictionaries/{dictionary}/_deploy": {
      "post": {
        "tags": [
          "Configuration",
          "Dictionaries"
        ],
        "summary": "Deploy dictionary to API gateway",
        "description": "User must have the DICTIONARY[UPDATE] permission to use this service",
        "operationId": "deployDictionary",
        "parameters": [
          {
            "name": "dictionary",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dictionary successfully deployed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DictionaryEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/dictionaries/{dictionary}/_undeploy": {
      "post": {
        "tags": [
          "Configuration",
          "Dictionaries"
        ],
        "summary": "Undeploy dictionary to API gateway",
        "description": "User must have the DICTIONARY[UPDATE] permission to use this service",
        "operationId": "undeployDictionary",
        "parameters": [
          {
            "name": "dictionary",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dictionary successfully undeployed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DictionaryEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/apiheaders/{id}": {
      "put": {
        "tags": [
          "Configuration"
        ],
        "summary": "Update an API header",
        "description": "User must have the PORTAL_API_HEADER[UPDATE] permission to use this service",
        "operationId": "update_20",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateApiHeaderEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "API header successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiHeaderEntity"
                }
              }
            }
          },
          "404": {
            "description": "API header not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Configuration"
        ],
        "summary": "Delete an API header",
        "description": "User must have the PORTAL_API_HEADER[DELETE] permission to use this service",
        "operationId": "delete_20",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API header successfully deleted",
            "content": {}
          },
          "404": {
            "description": "API header not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/apiheaders": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "List API headers",
        "operationId": "get_7",
        "responses": {
          "200": {
            "description": "List of API headers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiHeaderEntity"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Configuration"
        ],
        "summary": "Create an API header",
        "description": "User must have the PORTAL_API_HEADER[CREATE] permission to use this service",
        "operationId": "create_17",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewApiHeaderEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "API header successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiHeaderEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/applications/registration/providers": {
      "get": {
        "tags": [
          "Client Registration Providers",
          "Configuration"
        ],
        "summary": "Get the list of client registration providers",
        "description": "User must have the PORTAL_CLIENT_REGISTRATION_PROVIDER[READ] permission to use this service",
        "operationId": "listClientRegistrationProviders",
        "responses": {
          "200": {
            "description": "List client registration providers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClientRegistrationProviderListItem"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Client Registration Providers",
          "Configuration"
        ],
        "summary": "Create a client registration provider",
        "description": "User must have the PORTAL_CLIENT_REGISTRATION_PROVIDER[CREATE] permission to use this service",
        "operationId": "createClientRegistrationProvider",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewClientRegistrationProviderEntity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Client registration provider provider successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientRegistrationProviderEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "identity-provider"
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/applications/registration/providers/{clientRegistrationProvider}": {
      "get": {
        "tags": [
          "Client Registration Providers",
          "Configuration"
        ],
        "summary": "Get a client registration provider",
        "description": "User must have the PORTAL_CLIENT_REGISTRATION_PROVIDER[READ] permission to use this service",
        "operationId": "getClientRegistrationProvider",
        "parameters": [
          {
            "name": "clientRegistrationProvider",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A client registration provider",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Client Registration Providers",
          "Configuration"
        ],
        "summary": "Update a client registration provider",
        "description": "User must have the PORTAL_CLIENT_REGISTRATION_PROVIDER[UPDATE] permission to use this service",
        "operationId": "updateClientRegistrationProvider",
        "parameters": [
          {
            "name": "clientRegistrationProvider",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClientRegistrationProviderEntity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated client registration provider",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientRegistrationProviderEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "clientRegistrationProvider"
      },
      "delete": {
        "tags": [
          "Client Registration Providers",
          "Configuration"
        ],
        "summary": "Delete a client registration provider",
        "description": "User must have the PORTAL_CLIENT_REGISTRATION_PROVIDER[DELETE] permission to use this service",
        "operationId": "deleteClientRegistrationProvider",
        "parameters": [
          {
            "name": "clientRegistrationProvider",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Client registration provider successfully deleted",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/entrypoints/{entrypoint}": {
      "get": {
        "tags": [
          "Entrypoints",
          "Configuration"
        ],
        "summary": "Get a platform entrypoints",
        "description": "User must have the MANAGEMENT_ENTRYPOINT[READ] permission to use this service",
        "operationId": "get_8",
        "parameters": [
          {
            "name": "entrypoint",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A platform entrypoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntrypointEntity"
                }
              }
            }
          },
          "404": {
            "description": "Entrypoint not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Entrypoints",
          "Configuration"
        ],
        "summary": "Delete a platform entrypoint",
        "description": "User must have the MANAGEMENT_ENTRYPOINT[DELETE] permission to use this service",
        "operationId": "delete_21",
        "parameters": [
          {
            "name": "entrypoint",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Entrrypoint successfully deleted",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/entrypoints": {
      "get": {
        "tags": [
          "Entrypoints",
          "Configuration"
        ],
        "summary": "List the platform entrypoints",
        "description": "User must have the MANAGEMENT_ENTRYPOINT[READ] permission to use this service",
        "operationId": "list_15",
        "responses": {
          "200": {
            "description": "List of platform entrypoints",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntrypointEntity"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Entrypoints",
          "Configuration"
        ],
        "summary": "Update a platform entrypoint",
        "description": "User must have the MANAGEMENT_ENTRYPOINT[UPDATE] permission to use this service",
        "operationId": "update_21",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEntryPointEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Updated entrypoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntrypointEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "post": {
        "tags": [
          "Entrypoints",
          "Configuration"
        ],
        "summary": "Create a platform entrypoint",
        "description": "User must have the MANAGEMENT_ENTRYPOINT[CREATE] permission to use this service",
        "operationId": "create_18",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewEntryPointEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntrypointEntity"
                }
              }
            }
          },
          "201": {
            "description": "Entrypoint successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntrypointEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/quality-rules/{id}": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get a quality rule",
        "description": "User must have the MANAGEMENT_QUALITY_RULE[READ] permission to use this service",
        "operationId": "get_9",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Quality rule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QualityRuleEntity"
                }
              }
            }
          },
          "404": {
            "description": "Quality rule not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Configuration"
        ],
        "summary": "Update a quality rule",
        "description": "User must have the MANAGEMENT_QUALITY_RULE[READ] permission to use this service",
        "operationId": "update_22",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateQualityRuleEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Quality rule successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QualityRuleEntity"
                }
              }
            }
          },
          "404": {
            "description": "Quality rule not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Configuration"
        ],
        "summary": "Delete a quality rule",
        "description": "User must have the MANAGEMENT_QUALITY_RULE[READ] permission to use this service",
        "operationId": "delete_22",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Quality rule successfully deleted",
            "content": {}
          },
          "404": {
            "description": "Quality rule not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/quality-rules": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "List quality rules",
        "operationId": "get_10",
        "responses": {
          "200": {
            "description": "List of quality rules",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QualityRuleEntity"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Configuration"
        ],
        "summary": "Create a quality rule",
        "description": "User must have the MANAGEMENT_QUALITY_RULE[CREATE] permission to use this service",
        "operationId": "create_19",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewQualityRuleEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Quality rule successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QualityRuleEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/themes/{themeId}/logo": {
      "get": {
        "tags": [
          "Themes",
          "Configuration"
        ],
        "operationId": "getLogo",
        "parameters": [
          {
            "name": "themeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/themes/{themeId}/backgroundImage": {
      "get": {
        "tags": [
          "Themes",
          "Configuration"
        ],
        "operationId": "getBackground",
        "parameters": [
          {
            "name": "themeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/themes/{themeId}": {
      "get": {
        "tags": [
          "Themes",
          "Configuration"
        ],
        "operationId": "get_11",
        "parameters": [
          {
            "name": "themeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThemeEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Themes",
          "Configuration"
        ],
        "operationId": "update_23",
        "parameters": [
          {
            "name": "themeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateThemeEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThemeEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Themes",
          "Configuration"
        ],
        "operationId": "delete_23",
        "parameters": [
          {
            "name": "themeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/themes/{themeId}/reset": {
      "post": {
        "tags": [
          "Themes",
          "Configuration"
        ],
        "operationId": "reset",
        "parameters": [
          {
            "name": "themeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThemeEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/themes/{themeId}/optionalLogo": {
      "get": {
        "tags": [
          "Themes",
          "Configuration"
        ],
        "operationId": "getLogoLight",
        "parameters": [
          {
            "name": "themeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/themes": {
      "post": {
        "tags": [
          "Themes",
          "Configuration"
        ],
        "operationId": "create_20",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewThemeEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThemeEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/notifiers": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "List of available notifiers",
        "operationId": "getNotifiers_2",
        "responses": {
          "200": {
            "description": "List of notifiers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotifierEntity"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/notificationsettings": {
      "get": {
        "tags": [
          "Portal Notifications",
          "Configuration"
        ],
        "summary": "Get notification settings",
        "operationId": "get_12",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {}
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Portal Notifications",
          "Configuration"
        ],
        "summary": "Update portal notification settings",
        "operationId": "update_25",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PortalNotificationConfigEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalNotificationConfigEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "post": {
        "tags": [
          "Portal Notifications",
          "Configuration"
        ],
        "summary": "Create notification settings",
        "operationId": "create_21",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenericNotificationConfigEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/notificationsettings/{notificationId}": {
      "put": {
        "tags": [
          "Portal Notifications",
          "Configuration"
        ],
        "summary": "Update generic notification settings",
        "operationId": "update_24",
        "parameters": [
          {
            "name": "notificationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenericNotificationConfigEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericNotificationConfigEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Portal Notifications",
          "Configuration"
        ],
        "summary": "Delete notification settings",
        "operationId": "delete_24",
        "parameters": [
          {
            "name": "notificationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/categories/{id}": {
      "get": {
        "tags": [
          "Categories",
          "Configuration"
        ],
        "summary": "Get the category",
        "description": "User must have the PORTAL_CATEGORY[READ] permission to use this service",
        "operationId": "get_13",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category's definition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Categories",
          "Configuration"
        ],
        "summary": "Update the category",
        "description": "User must have the PORTAL_CATEGORY[UPDATE] permission to use this service",
        "operationId": "update_26",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCategoryEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Category successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Categories",
          "Configuration"
        ],
        "summary": "Delete the category",
        "description": "User must have the PORTAL_CATEGORY[DELETE] permission to use this service",
        "operationId": "delete_25",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Category successfully deleted",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/categories/{id}/picture": {
      "get": {
        "tags": [
          "Categories",
          "Configuration"
        ],
        "summary": "Get the category's picture",
        "description": "User must have the PORTAL_CATEGORY[READ] permission to use this service",
        "operationId": "picture_2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category's picture",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/categories/{id}/background": {
      "get": {
        "tags": [
          "Categories",
          "Configuration"
        ],
        "summary": "Get the Category's background",
        "description": "User must have the READ permission to use this service",
        "operationId": "background_2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category's background",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/categories": {
      "get": {
        "tags": [
          "Categories",
          "Configuration"
        ],
        "summary": "Retrieve list of categories",
        "operationId": "list_16",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryEntity"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Categories",
          "Configuration"
        ],
        "summary": "Update an existing category",
        "description": "User must have the PORTAL_CATEGORY[UPDATE] permission to use this service",
        "operationId": "update_27",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpdateCategoryEntity"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryEntity"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "post": {
        "tags": [
          "Categories",
          "Configuration"
        ],
        "summary": "Create a category",
        "description": "User must have the PORTAL_CATEGORY[CREATE] permission to use this service",
        "operationId": "create_22",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewCategoryEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/hooks": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get the list of available hooks",
        "operationId": "getHooks_2",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Hook"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/configuration/applications/types": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get the list of enabled application types",
        "operationId": "getEnabledApplicationTypes",
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/subscriptions": {
      "get": {
        "tags": [
          "Subscription"
        ],
        "summary": "List subscriptions for authenticated user",
        "operationId": "listUserSubscriptions",
        "parameters": [
          {
            "name": "application",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "plan",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of subscriptions",
            "content": {
              "application/json": {
                "schema": {
                  "uniqueItems": true,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Subscription"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Retrieve a user",
        "description": "User must have the ORGANIZATION_USERS[READ] permission to use this service",
        "operationId": "getUser_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserEntity"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a user",
        "description": "User must have the ORGANIZATION_USERS[DELETE] permission to use this service",
        "operationId": "deleteUser_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User successfully deleted",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/users/{id}/_process": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Process a user registration by accepting or rejecting it",
        "operationId": "validateRegistration_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "boolean"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Processed user",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/environments/{envId}/users/{id}/avatar": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get the user's avatar",
        "operationId": "getUserAvatar_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User's avatar",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/users/{id}/resetPassword": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Reset the user's password",
        "description": "User must have the ORGANIZATION_USERS[UPDATE] permission to use this service",
        "operationId": "resetPassword_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User's password reset",
            "content": {}
          },
          "400": {
            "description": "reset page URL must not be null",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/users/{id}/roles": {
      "put": {
        "tags": [
          "Users"
        ],
        "operationId": "updateUserRoles_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserReferenceRoleEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/environments/{envId}/users/{id}/groups": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "List of groups the user belongs to",
        "description": "User must have the ORGANIZATION_USERS[READ] permission to use this service",
        "operationId": "getGroups_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of user groups",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/users/{id}/memberships": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "List of memberships the user belongs to",
        "description": "User must have the ORGANIZATION_USERS[READ] permission to use this service",
        "operationId": "getMemberships_2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of user memberships",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Search for users using the search engine",
        "description": "User must have the ORGANIZATION_USERS[READ] permission to use this service",
        "operationId": "findAll_2",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List users matching the query criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a user",
        "description": "User must have the ORGANIZATION_USERS[CREATE] permission to use this service",
        "operationId": "createUser_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewExternalUserEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "List users matching the query criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/environments/{envId}/users/registration": {
      "post": {
        "tags": [
          "User Registration",
          "Users"
        ],
        "summary": "Register a user",
        "description": "User registration must be enabled",
        "operationId": "registerUser_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewExternalUserEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "User successfully registered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/environments/{envId}/users/registration/finalize": {
      "post": {
        "tags": [
          "User Registration",
          "Users"
        ],
        "summary": "Finalize user registration",
        "description": "User registration must be enabled",
        "operationId": "finalizeRegistration_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterUserEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "User successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/environments/{envId}/tickets": {
      "post": {
        "tags": [
          "Platform Tickets"
        ],
        "summary": "Create a platform ticket",
        "operationId": "create_23",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewTicketEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "Ticket succesfully created",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/environments/{envId}/search/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Search for users",
        "operationId": "searchUsers",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchableUser"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad query parameter",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/user/login": {
      "post": {
        "tags": [
          "Current User"
        ],
        "summary": "Login",
        "operationId": "login",
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/user": {
      "get": {
        "tags": [
          "Current User"
        ],
        "summary": "Get the authenticated user",
        "operationId": "getCurrentUser",
        "responses": {
          "200": {
            "description": "Authenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized user",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Current User"
        ],
        "summary": "Update the authenticated user",
        "operationId": "updateCurrentUser",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Updated user",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserEntity"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user profile",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Current User"
        ],
        "summary": "Delete the current logged user",
        "operationId": "deleteCurrentUser",
        "responses": {
          "204": {
            "description": "Current user successfully deleted",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/user/notifications": {
      "get": {
        "tags": [
          "User Notifications",
          "Current User"
        ],
        "summary": "List user's notifications",
        "operationId": "list_17",
        "responses": {
          "200": {
            "description": "User's notifications",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "User Notifications",
          "Current User"
        ],
        "summary": "Delete all user's notifications",
        "operationId": "deleteAll",
        "responses": {
          "204": {
            "description": "Notifications successfully deleted",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/user/notifications/{notification}": {
      "delete": {
        "tags": [
          "User Notifications",
          "Current User"
        ],
        "summary": "Delete a single user's notification",
        "operationId": "delete_26",
        "parameters": [
          {
            "name": "notification",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Notification successfully deleted",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/user/subscribeNewsletter": {
      "post": {
        "tags": [
          "Current User"
        ],
        "summary": "Subscribe to the newsletter the authenticated user",
        "operationId": "subscribeNewsletter",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Updated user",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserEntity"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user profile",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/environments/{envId}/user/avatar": {
      "get": {
        "tags": [
          "Current User"
        ],
        "summary": "Get user's avatar",
        "operationId": "getCurrentUserPicture",
        "responses": {
          "200": {
            "description": "User's avatar",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/user/tasks": {
      "get": {
        "tags": [
          "Current User"
        ],
        "summary": "Get the user's tasks",
        "operationId": "getUserTasks",
        "responses": {
          "200": {
            "description": "User's tasks",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/user/tags": {
      "get": {
        "tags": [
          "Current User"
        ],
        "summary": "Get the user's allowed sharding tags",
        "operationId": "getUserShardingTags",
        "responses": {
          "200": {
            "description": "User's sharding tags",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/user/tokens/{token}": {
      "delete": {
        "tags": [
          "User Tokens",
          "Current User"
        ],
        "summary": "Revoke a single user's personal tokens",
        "operationId": "revoke",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User's personal token revoked",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/user/tokens": {
      "get": {
        "tags": [
          "User Tokens",
          "Current User"
        ],
        "summary": "List user's personal tokens",
        "operationId": "list_18",
        "responses": {
          "200": {
            "description": "User's personal tokens",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "User Tokens",
          "Current User"
        ],
        "summary": "Create a personal token",
        "operationId": "create_24",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewTokenEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenEntity"
                }
              }
            }
          },
          "201": {
            "description": "A new personal token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "User Tokens",
          "Current User"
        ],
        "summary": "Revoke all user's personal tokens",
        "operationId": "revokeAll",
        "responses": {
          "204": {
            "description": "User's personal tokens revoked",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/user/logout": {
      "post": {
        "tags": [
          "Current User"
        ],
        "summary": "Logout",
        "operationId": "logout",
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}": {
      "post": {
        "tags": [
          "Environment"
        ],
        "summary": "Create an Environment",
        "operationId": "createEnvironment",
        "parameters": [
          {
            "name": "environmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEnvironmentEntity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Environment successfully created",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "environmentEntity"
      },
      "delete": {
        "tags": [
          "Environment"
        ],
        "summary": "Delete an Environment",
        "operationId": "deleteEnvironment",
        "parameters": [
          {
            "name": "environmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Environment successfully deleted",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/alerts/metrics": {
      "get": {
        "tags": [
          "Alerts"
        ],
        "summary": "List alert metrics",
        "operationId": "listMetrics",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlertMetric"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/audit": {
      "get": {
        "summary": "Retrieve audit logs for the platform",
        "description": "User must have the MANAGEMENT_AUDIT[READ] permission to use this service",
        "operationId": "list_19",
        "parameters": [
          {
            "name": "mgmt",
            "in": "query",
            "description": "true if you only want logs from the management, false if you also want api and application audit logs",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "api",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "application",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "event",
            "in": "query",
            "description": "filter by the name of an event.",
            "schema": {
              "type": "string"
            },
            "example": "APPLICATION_UPDATED, API_CREATED, METADATA_DELETED, ..."
          },
          {
            "name": "from",
            "in": "query",
            "description": "Timestamp used to define the start date of the time window to query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "Timestamp used to define the end date of the time window to query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of elements per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of audits",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/audit/events": {
      "get": {
        "summary": "List available audit event type for platform",
        "description": "User must have the MANAGEMENT_AUDIT[READ] permission to use this service",
        "operationId": "getEvents_1",
        "responses": {
          "200": {
            "description": "List of audits",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuditEvent"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/portal": {
      "get": {
        "tags": [
          "Portal"
        ],
        "summary": "Get the portal configuration",
        "description": "Every users can use this service",
        "operationId": "getConfig",
        "responses": {
          "200": {
            "description": "Portal configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalConfigEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Portal"
        ],
        "summary": "Save the portal configuration",
        "operationId": "savePortalConfig",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PortalConfigEntity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated portal configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalConfigEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "config"
      }
    },
    "/organizations/{orgId}/environments/{envId}/portal/pages": {
      "get": {
        "tags": [
          "Portal Pages",
          "Portal"
        ],
        "summary": "List pages",
        "description": "Every users can use this service",
        "operationId": "listPages_1",
        "parameters": [
          {
            "name": "Accept-Language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "homepage",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "published",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "MARKDOWN",
                "SWAGGER",
                "FOLDER",
                "LINK",
                "ROOT",
                "SYSTEM_FOLDER",
                "TRANSLATION"
              ]
            }
          },
          {
            "name": "parent",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "root",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "translated",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of pages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PageEntity"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Portal Pages",
          "Portal"
        ],
        "summary": "Create a page",
        "description": "User must have the ENVIRONMENT_DOCUMENTATION[CREATE] permission to use this service",
        "operationId": "createPage_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPageEntity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Page successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "page"
      }
    },
    "/organizations/{orgId}/environments/{envId}/portal/pages/_fetch": {
      "post": {
        "tags": [
          "Portal Pages",
          "Portal"
        ],
        "summary": "Refresh all pages by calling their associated fetcher",
        "description": "User must have the ENVIRONMENT_DOCUMENTATION[UPDATE] permission to use this service",
        "operationId": "fetchAllPages_1",
        "responses": {
          "201": {
            "description": "Pages successfully refreshed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/portal/pages/_import": {
      "put": {
        "tags": [
          "Portal Pages",
          "Portal"
        ],
        "summary": "Import pages",
        "description": "User must have the ENVIRONMENT_DOCUMENTATION[CREATE] permission to use this service",
        "operationId": "updateImportFiles_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImportPageEntity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PageEntity"
                  }
                }
              }
            }
          },
          "201": {
            "description": "Page successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "page"
      },
      "post": {
        "tags": [
          "Portal Pages",
          "Portal"
        ],
        "summary": "Import pages",
        "description": "User must have the ENVIRONMENT_DOCUMENTATION[CREATE] permission to use this service",
        "operationId": "importFiles_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImportPageEntity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PageEntity"
                  }
                }
              }
            }
          },
          "201": {
            "description": "Page successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "page"
      }
    },
    "/organizations/{orgId}/environments/{envId}/portal/pages/{page}/content": {
      "get": {
        "tags": [
          "Portal Pages",
          "Portal"
        ],
        "summary": "Get the page's content",
        "description": "Every users can use this service",
        "operationId": "getPageContent_1",
        "parameters": [
          {
            "name": "page",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Page's content",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/portal/pages/{page}": {
      "get": {
        "tags": [
          "Portal Pages",
          "Portal"
        ],
        "summary": "Get a page",
        "description": "Every users can use this service",
        "operationId": "getPage_1",
        "parameters": [
          {
            "name": "Accept-Language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "portal",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "translated",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Page",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Portal Pages",
          "Portal"
        ],
        "summary": "Update a page",
        "description": "User must have the ENVIRONMENT_DOCUMENTATION[UPDATE] permission to use this service",
        "operationId": "updatePage_1",
        "parameters": [
          {
            "name": "page",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePageEntity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageEntity"
                }
              }
            }
          },
          "201": {
            "description": "Page successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "page"
      },
      "delete": {
        "tags": [
          "Portal Pages",
          "Portal"
        ],
        "summary": "Delete a page",
        "description": "User must have the ENVIRONMENT_DOCUMENTATION[DELETE] permission to use this service",
        "operationId": "deletePage_1",
        "parameters": [
          {
            "name": "page",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Page successfully deleted",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Portal Pages",
          "Portal"
        ],
        "summary": "Update a page",
        "description": "User must have the ENVIRONMENT_DOCUMENTATION[UPDATE] permission to use this service",
        "operationId": "partialUpdatePage_1",
        "parameters": [
          {
            "name": "page",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePageEntity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageEntity"
                }
              }
            }
          },
          "201": {
            "description": "Page successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "page"
      }
    },
    "/organizations/{orgId}/environments/{envId}/portal/pages/{page}/media": {
      "get": {
        "tags": [
          "Portal Media",
          "Portal Pages",
          "Portal"
        ],
        "summary": "Retrieve all media for a Portal page",
        "description": "User must have the ENVIRONMENT_DOCUMENTATION[READ] permission to use this service",
        "operationId": "getMedia_1",
        "parameters": [
          {
            "name": "page",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Portal Media",
          "Portal Pages",
          "Portal"
        ],
        "summary": "Attach a media to a portal page ",
        "description": "User must have the ENVIRONMENT_DOCUMENTATION[UPDATE] permission to use this service",
        "operationId": "attachMedia_1",
        "parameters": [
          {
            "name": "page",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  },
                  "fileName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Media successfully added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/portal/pages/{page}/_fetch": {
      "post": {
        "tags": [
          "Portal Pages",
          "Portal"
        ],
        "summary": "Refresh page by calling the associated fetcher",
        "description": "User must have the ENVIRONMENT_DOCUMENTATION[UPDATE] permission to use this service",
        "operationId": "fetchPage_1",
        "parameters": [
          {
            "name": "page",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageEntity"
                }
              }
            }
          },
          "201": {
            "description": "Page successfully refreshed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/portal/apis/_search": {
      "post": {
        "tags": [
          "Portal APIs",
          "Portal"
        ],
        "summary": "Search for API using the search engine",
        "operationId": "searchPortalApis",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List accessible APIs for current user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiListItem"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/portal/media/upload": {
      "post": {
        "tags": [
          "Portal Media",
          "Portal"
        ],
        "summary": "Create a media for the portal",
        "description": "User must have the PORTAL_DOCUMENTATION[CREATE] permission to use this service",
        "operationId": "upload",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Media successfully created",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/portal/media/{hash}": {
      "get": {
        "tags": [
          "Portal Media",
          "Portal"
        ],
        "summary": "Retrieve a media",
        "operationId": "getImage_1",
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A media",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/portal/identities": {
      "get": {
        "tags": [
          "Portal",
          "Authentication",
          "Identity Providers"
        ],
        "summary": "Get the list of social identity providers",
        "operationId": "listSocialIdentityProvider",
        "responses": {
          "200": {
            "description": "List social identity providers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SocialIdentityProviderEntity"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/fetchers/{fetcher}/schema": {
      "get": {
        "tags": [
          "Plugins"
        ],
        "summary": "Get a fetcher plugin's schema",
        "operationId": "getFetcherSchema",
        "parameters": [
          {
            "name": "fetcher",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Fetcher's schema",
            "content": {}
          },
          "404": {
            "description": "Fetcher not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/fetchers/{fetcher}": {
      "get": {
        "tags": [
          "Plugins"
        ],
        "summary": "Get a fetcher plugin",
        "operationId": "getFetcher",
        "parameters": [
          {
            "name": "fetcher",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Fetcher",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetcherEntity"
                }
              }
            }
          },
          "404": {
            "description": "Fetcher not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/fetchers": {
      "get": {
        "tags": [
          "Plugins"
        ],
        "summary": "List of fetcher plugins",
        "operationId": "list_20",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "import",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of fetchers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FetcherListItem"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/policies": {
      "get": {
        "tags": [
          "Plugins"
        ],
        "summary": "List policies",
        "description": "User must have the MANAGEMENT_API[READ] permission to use this service",
        "operationId": "listPolicies",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PolicyListItem"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/policies/{policy}/schema": {
      "get": {
        "tags": [
          "Plugins"
        ],
        "summary": "Get a policy's schema",
        "description": "User must have the MANAGEMENT_API[READ] permission to use this service",
        "operationId": "getPolicySchema",
        "parameters": [
          {
            "name": "policy",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/policies/{policy}/icon": {
      "get": {
        "tags": [
          "Plugins"
        ],
        "summary": "Get a policy's icon",
        "description": "User must have the MANAGEMENT_API[READ] permission to use this service",
        "operationId": "getPolicyIcon",
        "parameters": [
          {
            "name": "policy",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/policies/{policy}/doc": {
      "get": {
        "tags": [
          "Plugins"
        ],
        "summary": "Get a policy's documentation",
        "description": "User must have the MANAGEMENT_API[READ] permission to use this service",
        "operationId": "getPolicyDoc",
        "parameters": [
          {
            "name": "policy",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/policies/{policy}": {
      "get": {
        "tags": [
          "Plugins"
        ],
        "summary": "Get a policy",
        "description": "User must have the MANAGEMENT_API[READ] permission to use this service",
        "operationId": "getPolicy",
        "parameters": [
          {
            "name": "policy",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/policies/swagger": {
      "get": {
        "tags": [
          "Plugins"
        ],
        "summary": "List policies which are handling Swagger / OAI definition",
        "description": "These policies are used when importing an OAI to create an API",
        "operationId": "getSwaggerPolicy",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PolicyListItem"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/resources": {
      "get": {
        "tags": [
          "Plugins"
        ],
        "summary": "List resource plugins",
        "description": "User must have the MANAGEMENT_API[READ] permission to use this service",
        "operationId": "listResources",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of resources",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResourceListItem"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/resources/{resource}/schema": {
      "get": {
        "tags": [
          "Plugins"
        ],
        "summary": "Get a resource's schema",
        "description": "User must have the MANAGEMENT_API[READ] permission to use this service",
        "operationId": "getResourceSchema",
        "parameters": [
          {
            "name": "resource",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/resources/{resource}": {
      "get": {
        "tags": [
          "Plugins"
        ],
        "summary": "Get a resource",
        "description": "User must have the MANAGEMENT_API[READ] permission to use this service",
        "operationId": "getResource",
        "parameters": [
          {
            "name": "resource",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource plugin",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PluginEntity"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/services-discovery": {
      "get": {
        "tags": [
          "Plugins"
        ],
        "summary": "List service discovery plugins",
        "description": "User must have the MANAGEMENT_API[READ] permission to use this service",
        "operationId": "listResources_1",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of service discovery plugins",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResourceListItem"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/services-discovery/{plugin}": {
      "get": {
        "tags": [
          "Plugins"
        ],
        "summary": "Get a service discovery",
        "description": "User must have the MANAGEMENT_API[READ] permission to use this service",
        "operationId": "getServiceDiscovery",
        "parameters": [
          {
            "name": "plugin",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Service discovery plugin",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PluginEntity"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/services-discovery/{plugin}/schema": {
      "get": {
        "tags": [
          "Plugins"
        ],
        "summary": "Get a service discovery's schema",
        "description": "User must have the MANAGEMENT_API[READ] permission to use this service",
        "operationId": "getServiceDiscoverySchema",
        "parameters": [
          {
            "name": "plugin",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Service discovery plugin's schema",
            "content": {}
          },
          "404": {
            "description": "Service discovery not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/instances": {
      "get": {
        "tags": [
          "Gateway"
        ],
        "summary": "List gateway instances",
        "operationId": "listInstances",
        "parameters": [
          {
            "name": "includeStopped",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "from",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageInstanceListItem"
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/instances/{instance}/monitoring/{gatewayId}": {
      "get": {
        "tags": [
          "Gateway"
        ],
        "summary": "Get monitoring metrics for a gateway instance",
        "operationId": "instanceMonitoring",
        "parameters": [
          {
            "name": "gatewayId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MonitoringData"
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/instances/{instance}": {
      "get": {
        "tags": [
          "Gateway"
        ],
        "summary": "Get a gateway instance",
        "operationId": "getInstance",
        "parameters": [
          {
            "name": "instance",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/platform/logs": {
      "get": {
        "tags": [
          "Platform Logs",
          "Platform"
        ],
        "summary": "Get platform logs",
        "description": "User must have the MANAGEMENT_PLATFORM[READ] permission to use this service",
        "operationId": "platformLogs",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Timestamp used to define the start date of the time window to query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "Timestamp used to define the end date of the time window to query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "The expresion used to search for logs. It looks like 'transaction:123-456-789 AND uri=\\\\/path\\\\/to\\\\/resource* AND response-time:[100 TO 200]'. Reserved characters that must be escaped + - = && || > < ! ( ) { } [ ] ^ \" ~ * ? : \\ /",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The number of data to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "field",
            "in": "query",
            "description": "The field to query when doing `group_by` queries",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "true means ASC order, false means DESC",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Platform logs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchLogResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/platform/logs/export": {
      "get": {
        "tags": [
          "Platform Logs",
          "Platform"
        ],
        "summary": "Export platform logs as CSV",
        "description": "User must have the MANAGEMENT_PLATFORM[READ] permission to use this service",
        "operationId": "exportPlatformLogsAsCSV",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Timestamp used to define the start date of the time window to query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "Timestamp used to define the end date of the time window to query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "The expresion used to search for logs. It looks like 'transaction:123-456-789 AND uri=\\\\/path\\\\/to\\\\/resource* AND response-time:[100 TO 200]'. Reserved characters that must be escaped + - = && || > < ! ( ) { } [ ] ^ \" ~ * ? : \\ /",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The number of data to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "field",
            "in": "query",
            "description": "The field to query when doing `group_by` queries",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "true means ASC order, false means DESC",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Platform logs as CSV",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/platform/logs/{log}": {
      "get": {
        "tags": [
          "Platform Logs",
          "Platform"
        ],
        "summary": "Get a specific log",
        "description": "User must have the MANAGEMENT_PLATFORM[READ] permission to use this service",
        "operationId": "platformLog",
        "parameters": [
          {
            "name": "log",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timestamp",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Single log",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRequest"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/platform/analytics": {
      "get": {
        "tags": [
          "Platform Analytics",
          "Platform"
        ],
        "summary": "Get platform analytics",
        "description": "User must have the MANAGEMENT_PLATFORM[READ] permission to use this service",
        "operationId": "platformAnalytics",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Timestamp used to define the start date of the time window to query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "Timestamp used to define the end date of the time window to query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "interval",
            "in": "query",
            "description": "The time interval when getting histogram data (in milliseconds)",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 600000
          },
          {
            "name": "query",
            "in": "query",
            "description": "The Lucene query used to filter data",
            "schema": {
              "type": "string"
            },
            "example": "api:xxxx-xxxx-xxxx-xxxx AND plan:yyyy-yyyy-yyyy-yyyy AND host:\"demo.gravitee.io\" AND path:/test"
          },
          {
            "name": "field",
            "in": "query",
            "description": "The field to query when doing `group_by` queries",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The number of data to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The type of data to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "group_by",
                "date_histo",
                "count"
              ]
            }
          },
          {
            "name": "ranges",
            "in": "query",
            "description": "Ranges allows you to group field's data. Mainly used to group HTTP statuses code with `group_by` queries",
            "schema": {
              "type": "string"
            },
            "example": "100:199;200:299;300:399;400:499;500:599"
          },
          {
            "name": "order",
            "in": "query",
            "description": "The field used to sort results. Can be asc or desc (prefix with minus '-') ",
            "schema": {
              "type": "string"
            },
            "example": "order:-response-time"
          }
        ],
        "responses": {
          "200": {
            "description": "Platform analytics",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/platform/events": {
      "get": {
        "tags": [
          "Platform Events",
          "Platform"
        ],
        "summary": "List platform events",
        "description": "User must have the MANAGEMENT_PLATFORM[READ] permission to use this service",
        "operationId": "listEvents_1",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "all"
            }
          },
          {
            "name": "from",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "api_ids",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Platform events",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/platform/tickets": {
      "post": {
        "tags": [
          "Platform Tickets",
          "Platform"
        ],
        "summary": "Create a platform ticket",
        "operationId": "create_25",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewTicketEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "Ticket succesfully created",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/environments/{envId}/platform/alerts/{alert}": {
      "put": {
        "tags": [
          "Platform Alerts",
          "Platform"
        ],
        "summary": "Update an alert for the platform",
        "description": "User must have the MANAGEMENT_ALERT[UPDATE] permission to use this service",
        "operationId": "update_28",
        "parameters": [
          {
            "name": "alert",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAlertTriggerEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Alert successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertTriggerEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "post": {
        "tags": [
          "Platform Alerts",
          "Platform"
        ],
        "summary": "Associate the alert to multiple references (API, APPLICATION",
        "description": "User must have the MANAGEMENT_ALERT[UPDATE] permission to use this service",
        "operationId": "associate_1",
        "parameters": [
          {
            "name": "alert",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Alert successfully associated",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Platform Alerts",
          "Platform"
        ],
        "summary": "Delete an alert for the platform",
        "description": "User must have the MANAGEMENT_ALERT[DELETE] permission to use this service",
        "operationId": "delete_27",
        "parameters": [
          {
            "name": "alert",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Alert successfully deleted",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AlertTriggerEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/platform/alerts": {
      "get": {
        "tags": [
          "Platform Alerts",
          "Platform"
        ],
        "summary": "List configured alerts of the platform",
        "description": "User must have the MANAGEMENT_ALERT[READ] permission to use this service",
        "operationId": "list_21",
        "responses": {
          "200": {
            "description": "List of alerts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlertTriggerEntity"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Platform Alerts",
          "Platform"
        ],
        "summary": "Create an alert for the platform",
        "description": "User must have the MANAGEMENT_ALERT[CREATE] permission to use this service",
        "operationId": "create_26",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewAlertTriggerEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Alert successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertTriggerEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/environments/{envId}/platform/alerts/status": {
      "get": {
        "tags": [
          "Platform Alerts",
          "Platform"
        ],
        "summary": "Get alerting status",
        "description": "User must have the MANAGEMENT_ALERT[READ] permission to use this service",
        "operationId": "status_2",
        "responses": {
          "200": {
            "description": "Alerting status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertStatusEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/platform/alerts/{alert}/events": {
      "get": {
        "tags": [
          "Platform Alerts",
          "Platform"
        ],
        "summary": "Retrieve the list of events for an alert",
        "description": "User must have the MANAGEMENT_ALERT[READ] permission to use this service",
        "operationId": "listEvents_2",
        "parameters": [
          {
            "name": "alert",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of events",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/messages": {
      "post": {
        "tags": [
          "Messages"
        ],
        "summary": "Send a message to users depending on their profile",
        "description": "User must have the MANAGEMENT_MESSAGE[CREATE] permission to use this service",
        "operationId": "create_27",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Message successfully sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/environments/{envId}/entrypoints": {
      "get": {
        "tags": [
          "Portal entrypoints"
        ],
        "operationId": "list_22",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntrypointEntity"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/notifiers": {
      "get": {
        "tags": [
          "Plugins"
        ],
        "summary": "List notifier plugins",
        "description": "User must have the MANAGEMENT_API[READ] permission to use this service",
        "operationId": "listNotifiers_1",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of notifiers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotifierListItem"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/notifiers/{notifier}/schema": {
      "get": {
        "tags": [
          "Plugins"
        ],
        "summary": "Get a notifier's schema",
        "description": "User must have the MANAGEMENT_API[READ] permission to use this service",
        "operationId": "getNotifierSchema_1",
        "parameters": [
          {
            "name": "notifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notifier's schema",
            "content": {}
          },
          "404": {
            "description": "Notifier not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/notifiers/{notifier}": {
      "get": {
        "tags": [
          "Plugins"
        ],
        "summary": "Get a notifier",
        "description": "User must have the MANAGEMENT_API[READ] permission to use this service",
        "operationId": "getNotifier_1",
        "parameters": [
          {
            "name": "notifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notifier plugin",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotifierEntity"
                }
              }
            }
          },
          "404": {
            "description": "Notifier not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/auth/oauth2/{identity}/exchange": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "operationId": "tokenExchange",
        "parameters": [
          {
            "name": "identity",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/environments/{envId}/auth/oauth2/{identity}": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "operationId": "exchangeAuthorizationCode",
        "parameters": [
          {
            "name": "identity",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Payload"
              }
            }
          },
          "required": false
        },
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/environments": {
      "get": {
        "summary": "List available environments for current organization",
        "operationId": "list_23",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnvironmentEntity"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/search/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Search for users",
        "operationId": "searchUsers_1",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchableUser"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad query parameter",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/user/login": {
      "post": {
        "tags": [
          "Current User"
        ],
        "summary": "Login",
        "operationId": "login_1",
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/user": {
      "get": {
        "tags": [
          "Current User"
        ],
        "summary": "Get the authenticated user",
        "operationId": "getCurrentUser_1",
        "responses": {
          "200": {
            "description": "Authenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized user",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Current User"
        ],
        "summary": "Update the authenticated user",
        "operationId": "updateCurrentUser_1",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Updated user",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserEntity"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user profile",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Current User"
        ],
        "summary": "Delete the current logged user",
        "operationId": "deleteCurrentUser_1",
        "responses": {
          "204": {
            "description": "Current user successfully deleted",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/user/notifications": {
      "get": {
        "tags": [
          "User Notifications",
          "Current User"
        ],
        "summary": "List user's notifications",
        "operationId": "list_24",
        "responses": {
          "200": {
            "description": "User's notifications",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "User Notifications",
          "Current User"
        ],
        "summary": "Delete all user's notifications",
        "operationId": "deleteAll_1",
        "responses": {
          "204": {
            "description": "Notifications successfully deleted",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/user/notifications/{notification}": {
      "delete": {
        "tags": [
          "User Notifications",
          "Current User"
        ],
        "summary": "Delete a single user's notification",
        "operationId": "delete_28",
        "parameters": [
          {
            "name": "notification",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Notification successfully deleted",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/user/subscribeNewsletter": {
      "post": {
        "tags": [
          "Current User"
        ],
        "summary": "Subscribe to the newsletter the authenticated user",
        "operationId": "subscribeNewsletter_1",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Updated user",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserEntity"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user profile",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/organizations/{orgId}/user/avatar": {
      "get": {
        "tags": [
          "Current User"
        ],
        "summary": "Get user's avatar",
        "operationId": "getCurrentUserPicture_1",
        "responses": {
          "200": {
            "description": "User's avatar",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/user/tasks": {
      "get": {
        "tags": [
          "Current User"
        ],
        "summary": "Get the user's tasks",
        "operationId": "getUserTasks_1",
        "responses": {
          "200": {
            "description": "User's tasks",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/user/tags": {
      "get": {
        "tags": [
          "Current User"
        ],
        "summary": "Get the user's allowed sharding tags",
        "operationId": "getUserShardingTags_1",
        "responses": {
          "200": {
            "description": "User's sharding tags",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/user/tokens/{token}": {
      "delete": {
        "tags": [
          "User Tokens",
          "Current User"
        ],
        "summary": "Revoke a single user's personal tokens",
        "operationId": "revoke_1",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User's personal token revoked",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/user/tokens": {
      "get": {
        "tags": [
          "User Tokens",
          "Current User"
        ],
        "summary": "List user's personal tokens",
        "operationId": "list_25",
        "responses": {
          "200": {
            "description": "User's personal tokens",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "User Tokens",
          "Current User"
        ],
        "summary": "Create a personal token",
        "operationId": "create_28",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewTokenEntity"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenEntity"
                }
              }
            }
          },
          "201": {
            "description": "A new personal token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenEntity"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "User Tokens",
          "Current User"
        ],
        "summary": "Revoke all user's personal tokens",
        "operationId": "revokeAll_1",
        "responses": {
          "204": {
            "description": "User's personal tokens revoked",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/user/logout": {
      "post": {
        "tags": [
          "Current User"
        ],
        "summary": "Logout",
        "operationId": "logout_1",
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/auth/oauth2/{identity}/exchange": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "operationId": "tokenExchange_1",
        "parameters": [
          {
            "name": "identity",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ]
      }
    },
    "/organizations/{orgId}/auth/oauth2/{identity}": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "operationId": "exchangeAuthorizationCode_1",
        "parameters": [
          {
            "name": "identity",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Payload"
              }
            }
          },
          "required": false
        },
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        },
        "security": [
          {
            "gravitee-auth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    }
  },
  "components": {
    "schemas": {
      "NotifierListItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "schema": {
            "type": "string"
          }
        }
      },
      "NotifierEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "plugin": {
            "$ref": "#/components/schemas/PluginEntity"
          }
        }
      },
      "PluginEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "plugin": {
            "type": "string"
          },
          "dependencies": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "url"
            }
          },
          "path": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "IdentityProviderListItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "sync": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "GOOGLE",
              "GITHUB",
              "GRAVITEEIO_AM",
              "OIDC"
            ]
          },
          "created_at": {
            "type": "integer",
            "format": "int64"
          },
          "updated_at": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "GroupMappingEntity": {
        "type": "object",
        "properties": {
          "condition": {
            "type": "string"
          },
          "groups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "IdentityProviderEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "GOOGLE",
              "GITHUB",
              "GRAVITEEIO_AM",
              "OIDC"
            ]
          },
          "enabled": {
            "type": "boolean"
          },
          "configuration": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {}
            }
          },
          "groupMappings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupMappingEntity"
            }
          },
          "roleMappings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleMappingEntity"
            }
          },
          "userProfileMapping": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "emailRequired": {
            "type": "boolean"
          },
          "syncMappings": {
            "type": "boolean"
          },
          "created_at": {
            "type": "integer",
            "format": "int64"
          },
          "updated_at": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "RoleMappingEntity": {
        "type": "object",
        "properties": {
          "condition": {
            "type": "string"
          },
          "organizations": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "environments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "NewIdentityProviderEntity": {
        "required": [
          "configuration",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 2147483647,
            "minLength": 3,
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "GOOGLE",
              "GITHUB",
              "GRAVITEEIO_AM",
              "OIDC"
            ]
          },
          "configuration": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {}
            }
          },
          "enabled": {
            "type": "boolean"
          },
          "userProfileMapping": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "emailRequired": {
            "type": "boolean"
          },
          "syncMappings": {
            "type": "boolean"
          }
        }
      },
      "UpdateIdentityProviderEntity": {
        "required": [
          "configuration",
          "enabled",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "configuration": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {}
            }
          },
          "enabled": {
            "type": "boolean"
          },
          "groupMappings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupMappingEntity"
            }
          },
          "roleMappings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleMappingEntity"
            }
          },
          "userProfileMapping": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "emailRequired": {
            "type": "boolean"
          },
          "syncMappings": {
            "type": "boolean"
          }
        }
      },
      "CustomUserFieldEntity": {
        "required": [
          "key",
          "label"
        ],
        "type": "object",
        "properties": {
          "key": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string"
          },
          "label": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string"
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "required": {
            "type": "boolean"
          }
        }
      },
      "MembershipListItem": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "RoleMembership": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "reference": {
            "type": "string"
          }
        }
      },
      "RoleEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "scope": {
            "type": "string",
            "enum": [
              "API",
              "APPLICATION",
              "GROUP",
              "ENVIRONMENT",
              "ORGANIZATION",
              "PLATFORM"
            ]
          },
          "system": {
            "type": "boolean"
          },
          "permissions": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "default": {
            "type": "boolean"
          }
        }
      },
      "UpdateRoleEntity": {
        "required": [
          "name",
          "scope"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "scope": {
            "type": "string",
            "enum": [
              "API",
              "APPLICATION",
              "GROUP",
              "ENVIRONMENT",
              "ORGANIZATION",
              "PLATFORM"
            ]
          },
          "permissions": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "default": {
            "type": "boolean"
          }
        }
      },
      "NewRoleEntity": {
        "required": [
          "name",
          "scope"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "scope": {
            "type": "string",
            "enum": [
              "API",
              "APPLICATION",
              "GROUP",
              "ENVIRONMENT",
              "ORGANIZATION",
              "PLATFORM"
            ]
          },
          "permissions": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "default": {
            "type": "boolean"
          }
        }
      },
      "UserReferenceRoleEntity": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "referenceId": {
            "type": "string"
          },
          "referenceType": {
            "type": "string",
            "enum": [
              "APPLICATION",
              "API",
              "GROUP",
              "ENVIRONMENT",
              "ORGANIZATION",
              "PLATFORM"
            ]
          },
          "roleIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UserGroupEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "roles": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "UserMembership": {
        "type": "object",
        "properties": {
          "reference": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "roles": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "source": {
            "type": "string"
          }
        }
      },
      "UserMembershipList": {
        "type": "object",
        "properties": {
          "memberships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserMembership"
            }
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "UserEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "firstname": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "roles": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRoleEntity"
            }
          },
          "envRoles": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UserRoleEntity"
              }
            }
          },
          "picture": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "sourceId": {
            "type": "string"
          },
          "lastConnectionAt": {
            "type": "integer",
            "format": "int64"
          },
          "firstConnectionAt": {
            "type": "integer",
            "format": "int64"
          },
          "status": {
            "type": "string"
          },
          "loginCount": {
            "type": "integer",
            "format": "int64"
          },
          "newsletterSubscribed": {
            "type": "boolean"
          },
          "customFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {}
            }
          },
          "created_at": {
            "type": "integer",
            "format": "int64"
          },
          "updated_at": {
            "type": "integer",
            "format": "int64"
          },
          "primary_owner": {
            "type": "boolean"
          },
          "number_of_active_tokens": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "UserRoleEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "scope": {
            "type": "string",
            "enum": [
              "API",
              "APPLICATION",
              "GROUP",
              "ENVIRONMENT",
              "ORGANIZATION",
              "PLATFORM"
            ]
          },
          "permissions": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "NewExternalUserEntity": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "firstname": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "picture": {
            "type": "string"
          },
          "sourceId": {
            "type": "string"
          },
          "newsletter": {
            "type": "boolean"
          },
          "customFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {}
            }
          }
        }
      },
      "RegisterUserEntity": {
        "required": [
          "firstname",
          "lastname",
          "password",
          "token"
        ],
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "firstname": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          }
        }
      },
      "Page": {
        "type": "object",
        "properties": {
          "current": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "total_pages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "total_elements": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        }
      },
      "PagedResult": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "page": {
            "$ref": "#/components/schemas/Page"
          }
        }
      },
      "PagedResultUserEntity": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserEntity"
            }
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "page": {
            "$ref": "#/components/schemas/Page"
          }
        }
      },
      "UpdateOrganizationEntity": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "domainRestrictions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ApiListItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Api's uuid.",
            "example": "00f8c9e7-78fc-4907-b8c9-e778fc790750"
          },
          "name": {
            "type": "string",
            "description": "Api's name. Duplicate names can exists.",
            "example": "My Api"
          },
          "version": {
            "type": "string",
            "description": "Api's version. It's a simple string only used in the portal.",
            "example": "v1.0"
          },
          "description": {
            "type": "string",
            "description": "Api's version. It's a simple string only used in the portal.",
            "example": "v1.0"
          },
          "visibility": {
            "type": "string",
            "description": "The visibility of the API regarding the portal.",
            "example": "PUBLIC",
            "enum": [
              "PUBLIC",
              "PRIVATE"
            ]
          },
          "state": {
            "type": "string",
            "description": "The status of the API regarding the gateway.",
            "example": "STARTED",
            "enum": [
              "INITIALIZED",
              "STOPPED",
              "STARTED",
              "CLOSED"
            ]
          },
          "role": {
            "type": "string"
          },
          "categories": {
            "type": "array",
            "description": "the list of categories associated with this API",
            "example": "Product, Customer, Misc",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "labels": {
            "type": "array",
            "description": "the free list of labels associated with this API",
            "example": "json, read_only, awesome",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "rate": {
            "type": "number",
            "description": "How consumers have evaluated the API (between 0 to 5)",
            "format": "double",
            "example": 4
          },
          "numberOfRatings": {
            "type": "integer",
            "description": "How many consumers have evaluated the API",
            "format": "int32",
            "example": 4
          },
          "tags": {
            "type": "array",
            "description": "the list of sharding tags associated with this API.",
            "example": "public, private",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "created_at": {
            "type": "integer",
            "description": "The date (as a timestamp) when the API was created.",
            "format": "int64",
            "example": 1581256457163
          },
          "updated_at": {
            "type": "integer",
            "description": "The last date (as a timestamp) when the API was updated.",
            "format": "int64",
            "example": 1581256457163
          },
          "owner": {
            "$ref": "#/components/schemas/PrimaryOwnerEntity"
          },
          "picture_url": {
            "type": "string",
            "description": "the API logo url.",
            "example": "https://gravitee.mycompany.com/management/apis/6c530064-0b2c-4004-9300-640b2ce0047b/picture"
          },
          "virtual_hosts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VirtualHost"
            }
          },
          "lifecycle_state": {
            "type": "string",
            "enum": [
              "CREATED",
              "PUBLISHED",
              "UNPUBLISHED",
              "DEPRECATED",
              "ARCHIVED"
            ]
          },
          "workflow_state": {
            "type": "string",
            "enum": [
              "DRAFT",
              "IN_REVIEW",
              "REQUEST_FOR_CHANGES",
              "REVIEW_OK"
            ]
          },
          "context_path": {
            "type": "string",
            "description": "API's context path.",
            "example": "/my-awesome-api"
          }
        }
      },
      "PrimaryOwnerEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The user id.",
            "example": "005197cc-cc84-86a6-a75a-88f9772c67db"
          },
          "email": {
            "type": "string",
            "description": "The user email.",
            "example": "contact@gravitee.io"
          },
          "displayName": {
            "type": "string",
            "description": "The user display name.",
            "example": "John Doe"
          }
        }
      },
      "VirtualHost": {
        "type": "object",
        "properties": {
          "host": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "overrideEntrypoint": {
            "type": "boolean"
          }
        }
      },
      "ApiEntity": {
        "required": [
          "proxy"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "API's uuid.",
            "example": "00f8c9e7-78fc-4907-b8c9-e778fc790750"
          },
          "name": {
            "type": "string",
            "description": "API's name. Duplicate names can exists.",
            "example": "My Api"
          },
          "version": {
            "type": "string",
            "description": "Api's version. It's a simple string only used in the portal.",
            "example": "v1.0"
          },
          "description": {
            "type": "string",
            "description": "API's description. A short description of your API.",
            "example": "I can use a hundred characters to describe this API."
          },
          "groups": {
            "type": "array",
            "description": "API's groups. Used to add team in your API.",
            "example": "['MY_GROUP1', 'MY_GROUP2']",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "visibility": {
            "type": "string",
            "description": "The visibility of the API regarding the portal.",
            "example": "PUBLIC",
            "enum": [
              "PUBLIC",
              "PRIVATE"
            ]
          },
          "state": {
            "type": "string",
            "description": "The status of the API regarding the gateway.",
            "example": "STARTED",
            "enum": [
              "INITIALIZED",
              "STOPPED",
              "STARTED",
              "CLOSED"
            ]
          },
          "tags": {
            "type": "array",
            "description": "the list of sharding tags associated with this API.",
            "example": "public, private",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "picture": {
            "type": "string",
            "description": "the API logo encoded in base64"
          },
          "categories": {
            "type": "array",
            "description": "the list of categories associated with this API",
            "example": "Product, Customer, Misc",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "labels": {
            "type": "array",
            "description": "the free list of labels associated with this API",
            "example": "json, read_only, awesome",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "entrypoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiEntrypointEntity"
            }
          },
          "background": {
            "type": "string",
            "description": "the API background encoded in base64"
          },
          "context_path": {
            "type": "string",
            "description": "API's context path.",
            "example": "/my-awesome-api"
          },
          "proxy": {
            "$ref": "#/components/schemas/Proxy"
          },
          "paths": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Path"
            },
            "description": "a map where you can associate a path to a configuration (the policies configuration)"
          },
          "deployed_at": {
            "type": "integer",
            "description": "The last date (as timestamp) when the API was deployed.",
            "format": "int64",
            "example": 1581256457163
          },
          "created_at": {
            "type": "integer",
            "description": "The date (as a timestamp) when the API was created.",
            "format": "int64",
            "example": 1581256457163
          },
          "updated_at": {
            "type": "integer",
            "description": "The last date (as a timestamp) when the API was updated.",
            "format": "int64",
            "example": 1581256457163
          },
          "owner": {
            "$ref": "#/components/schemas/PrimaryOwnerEntity"
          },
          "properties": {
            "$ref": "#/components/schemas/Properties"
          },
          "services": {
            "$ref": "#/components/schemas/Services"
          },
          "picture_url": {
            "type": "string",
            "description": "the API logo url.",
            "example": "https://gravitee.mycompany.com/management/apis/6c530064-0b2c-4004-9300-640b2ce0047b/picture"
          },
          "resources": {
            "type": "array",
            "description": "The list of API resources used by policies like cache resources or oauth2",
            "items": {
              "$ref": "#/components/schemas/Resource"
            }
          },
          "path_mappings": {
            "type": "array",
            "description": "A list of paths used to aggregate data in analytics",
            "example": "/products/:productId, /products/:productId/media",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "response_templates": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ResponseTemplates"
            },
            "description": "A map that allows you to configure the output of a request based on the event throws by the gateway. Example : Quota exceeded, api-ky is missing, ..."
          },
          "lifecycle_state": {
            "type": "string",
            "enum": [
              "CREATED",
              "PUBLISHED",
              "UNPUBLISHED",
              "DEPRECATED",
              "ARCHIVED"
            ]
          },
          "workflow_state": {
            "type": "string",
            "enum": [
              "DRAFT",
              "IN_REVIEW",
              "REQUEST_FOR_CHANGES",
              "REVIEW_OK"
            ]
          },
          "disable_membership_notifications": {
            "type": "boolean"
          },
          "background_url": {
            "type": "string",
            "description": "the API background url.",
            "example": "https://gravitee.mycompany.com/management/apis/6c530064-0b2c-4004-9300-640b2ce0047b/background"
          }
        }
      },
      "ApiEntrypointEntity": {
        "type": "object",
        "properties": {
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "target": {
            "type": "string"
          },
          "host": {
            "type": "string"
          }
        }
      },
      "Cors": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "accessControlAllowOrigin": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "accessControlAllowOriginRegex": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Pattern"
            }
          },
          "accessControlExposeHeaders": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "accessControlMaxAge": {
            "type": "integer",
            "format": "int32"
          },
          "accessControlAllowCredentials": {
            "type": "boolean"
          },
          "accessControlAllowMethods": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "accessControlAllowHeaders": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "errorStatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "runPolicies": {
            "type": "boolean"
          }
        }
      },
      "Endpoint": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "target": {
            "type": "string"
          },
          "weight": {
            "type": "integer",
            "format": "int32"
          },
          "backup": {
            "type": "boolean"
          },
          "status": {
            "type": "string",
            "enum": [
              "UP",
              "DOWN",
              "TRANSITIONALLY_DOWN",
              "TRANSITIONALLY_UP"
            ]
          },
          "tenants": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "HTTP",
              "GRPC"
            ]
          },
          "inherit": {
            "type": "boolean"
          }
        }
      },
      "EndpointGroup": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "endpoints": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Endpoint"
            }
          },
          "loadBalancer": {
            "$ref": "#/components/schemas/LoadBalancer"
          },
          "services": {
            "$ref": "#/components/schemas/Services"
          },
          "httpProxy": {
            "$ref": "#/components/schemas/HttpProxy"
          },
          "httpClientOptions": {
            "$ref": "#/components/schemas/HttpClientOptions"
          },
          "httpClientSslOptions": {
            "$ref": "#/components/schemas/HttpClientSslOptions"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "Failover": {
        "type": "object",
        "properties": {
          "maxAttempts": {
            "type": "integer",
            "format": "int32"
          },
          "retryTimeout": {
            "type": "integer",
            "format": "int64"
          },
          "cases": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "TIMEOUT"
              ]
            }
          }
        }
      },
      "HttpClientOptions": {
        "type": "object",
        "properties": {
          "idleTimeout": {
            "type": "integer",
            "format": "int64"
          },
          "connectTimeout": {
            "type": "integer",
            "format": "int64"
          },
          "keepAlive": {
            "type": "boolean"
          },
          "readTimeout": {
            "type": "integer",
            "format": "int64"
          },
          "pipelining": {
            "type": "boolean"
          },
          "maxConcurrentConnections": {
            "type": "integer",
            "format": "int32"
          },
          "useCompression": {
            "type": "boolean"
          },
          "followRedirects": {
            "type": "boolean"
          },
          "clearTextUpgrade": {
            "type": "boolean"
          },
          "version": {
            "type": "string",
            "enum": [
              "HTTP_1_1",
              "HTTP_2"
            ]
          }
        }
      },
      "HttpClientSslOptions": {
        "type": "object",
        "properties": {
          "trustAll": {
            "type": "boolean"
          },
          "hostnameVerifier": {
            "type": "boolean"
          },
          "trustStore": {
            "$ref": "#/components/schemas/TrustStore"
          },
          "keyStore": {
            "$ref": "#/components/schemas/KeyStore"
          }
        }
      },
      "HttpProxy": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "useSystemProxy": {
            "type": "boolean"
          },
          "host": {
            "type": "string"
          },
          "port": {
            "type": "integer",
            "format": "int32"
          },
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "HTTP",
              "SOCKS4",
              "SOCKS5"
            ]
          }
        }
      },
      "KeyStore": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "PEM",
              "PKCS12",
              "JKS"
            ]
          }
        }
      },
      "LoadBalancer": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ROUND_ROBIN",
              "RANDOM",
              "WEIGHTED_ROUND_ROBIN",
              "WEIGHTED_RANDOM"
            ]
          }
        }
      },
      "Logging": {
        "type": "object",
        "properties": {
          "maxDurationMillis": {
            "type": "integer",
            "format": "int64"
          },
          "audit": {
            "$ref": "#/components/schemas/Audit"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "Path": {
        "type": "object",
        "additionalProperties": {
          "path": {
            "type": "string"
          },
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rule"
            }
          }
        }
      },
      "Pattern": {
        "type": "object"
      },
      "Policy": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "configuration": {
            "type": "string"
          }
        }
      },
      "Properties": {
        "type": "object",
        "properties": {
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            }
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "Property": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "dynamic": {
            "type": "boolean"
          }
        }
      },
      "Proxy": {
        "type": "object",
        "properties": {
          "virtualHosts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VirtualHost"
            }
          },
          "groups": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EndpointGroup"
            }
          },
          "failover": {
            "$ref": "#/components/schemas/Failover"
          },
          "cors": {
            "$ref": "#/components/schemas/Cors"
          },
          "logging": {
            "$ref": "#/components/schemas/Logging"
          },
          "stripContextPath": {
            "type": "boolean"
          },
          "preserveHost": {
            "type": "boolean"
          }
        }
      },
      "Resource": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "configuration": {
            "type": "string"
          }
        }
      },
      "ResponseTemplate": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "integer",
            "format": "int32"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "body": {
            "type": "string"
          }
        }
      },
      "ResponseTemplates": {
        "type": "object",
        "properties": {
          "templates": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ResponseTemplate"
            }
          }
        }
      },
      "Rule": {
        "type": "object",
        "properties": {
          "methods": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "CONNECT",
                "DELETE",
                "GET",
                "HEAD",
                "OPTIONS",
                "PATCH",
                "POST",
                "PUT",
                "TRACE",
                "OTHER"
              ]
            }
          },
          "policy": {
            "$ref": "#/components/schemas/Policy"
          },
          "description": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "Service": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "Services": {
        "type": "object",
        "properties": {
          "empty": {
            "type": "boolean"
          },
          "all": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Service"
            }
          }
        }
      },
      "TrustStore": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "PEM",
              "PKCS12",
              "JKS"
            ]
          }
        }
      },
      "ApiStateEntity": {
        "type": "object",
        "properties": {
          "api_id": {
            "type": "string"
          },
          "is_synchronized": {
            "type": "boolean"
          }
        }
      },
      "ImportSwaggerDescriptorEntity": {
        "required": [
          "payload"
        ],
        "type": "object",
        "properties": {
          "format": {
            "type": "string",
            "enum": [
              "WSDL",
              "API"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "INLINE",
              "URL"
            ]
          },
          "payload": {
            "type": "string",
            "description": "The swagger/openapi content."
          },
          "with_documentation": {
            "type": "boolean",
            "description": "Do you want to create a swagger page in addition to the API ?",
            "example": true
          },
          "with_path_mapping": {
            "type": "boolean",
            "description": "Do you want to create a path mapping for each declared swagger paths in addition to the API ?",
            "example": true
          },
          "with_policy_paths": {
            "type": "boolean",
            "description": "Do you want to create a path (in order to add policies under) for each declared swagger paths in addition to the API ?",
            "example": true
          },
          "with_policies": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ApiQualityMetricsEntity": {
        "type": "object",
        "properties": {
          "score": {
            "type": "number",
            "format": "double"
          },
          "metrics_passed": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            }
          }
        }
      },
      "ReviewEntity": {
        "type": "object",
        "properties": {
          "message": {
            "maxLength": 500,
            "minLength": 0,
            "type": "string"
          }
        }
      },
      "DuplicateApiEntity": {
        "required": [
          "context_path"
        ],
        "type": "object",
        "properties": {
          "version": {
            "type": "string"
          },
          "context_path": {
            "type": "string"
          },
          "filtered_fields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ApiKeyEntity": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "subscription": {
            "type": "string"
          },
          "application": {
            "type": "string"
          },
          "plan": {
            "type": "string"
          },
          "revoked": {
            "type": "boolean"
          },
          "paused": {
            "type": "boolean"
          },
          "expired": {
            "type": "boolean"
          },
          "expire_at": {
            "type": "integer",
            "format": "int64"
          },
          "created_at": {
            "type": "integer",
            "format": "int64"
          },
          "updated_at": {
            "type": "integer",
            "format": "int64"
          },
          "revoked_at": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ApiMembership": {
        "required": [
          "role"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User's technical identifier."
          },
          "reference": {
            "type": "string",
            "description": "User's reference for user providing from an identity provider."
          },
          "role": {
            "type": "string",
            "description": "Role's name"
          }
        }
      },
      "TransferOwnership": {
        "required": [
          "role"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "reference": {
            "type": "string"
          },
          "role": {
            "type": "string"
          }
        }
      },
      "MemberEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "referenceType": {
            "type": "string",
            "enum": [
              "APPLICATION",
              "API",
              "GROUP",
              "ENVIRONMENT",
              "ORGANIZATION",
              "PLATFORM"
            ]
          },
          "referenceId": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleEntity"
            }
          },
          "permissions": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "created_at": {
            "type": "integer",
            "format": "int64"
          },
          "updated_at": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "LogItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "timestamp": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "SearchLogResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "logs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LogItem"
            }
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      },
      "ApiRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "api": {
            "type": "string"
          },
          "timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "transactionId": {
            "type": "string"
          },
          "uri": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "method": {
            "type": "string",
            "enum": [
              "CONNECT",
              "DELETE",
              "GET",
              "HEAD",
              "OPTIONS",
              "PATCH",
              "POST",
              "PUT",
              "TRACE",
              "OTHER"
            ]
          },
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "responseTime": {
            "type": "integer",
            "format": "int64"
          },
          "apiResponseTime": {
            "type": "integer",
            "format": "int64"
          },
          "requestContentLength": {
            "type": "integer",
            "format": "int64"
          },
          "responseContentLength": {
            "type": "integer",
            "format": "int64"
          },
          "plan": {
            "type": "string"
          },
          "application": {
            "type": "string"
          },
          "localAddress": {
            "type": "string"
          },
          "remoteAddress": {
            "type": "string"
          },
          "endpoint": {
            "type": "string"
          },
          "tenant": {
            "type": "string"
          },
          "clientRequest": {
            "$ref": "#/components/schemas/Request"
          },
          "proxyRequest": {
            "$ref": "#/components/schemas/Request"
          },
          "clientResponse": {
            "$ref": "#/components/schemas/Response"
          },
          "proxyResponse": {
            "$ref": "#/components/schemas/Response"
          },
          "message": {
            "type": "string"
          },
          "gateway": {
            "type": "string"
          },
          "subscription": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "host": {
            "type": "string"
          },
          "user": {
            "type": "string"
          },
          "securityType": {
            "type": "string"
          },
          "securityToken": {
            "type": "string"
          }
        }
      },
      "Request": {
        "type": "object",
        "properties": {
          "method": {
            "type": "string",
            "enum": [
              "CONNECT",
              "DELETE",
              "GET",
              "HEAD",
              "OPTIONS",
              "PATCH",
              "POST",
              "PUT",
              "TRACE",
              "OTHER"
            ]
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "uri": {
            "type": "string"
          },
          "body": {
            "type": "string"
          }
        }
      },
      "Response": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "body": {
            "type": "string"
          }
        }
      },
      "Log": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "gateway": {
            "type": "string"
          },
          "endpoint": {
            "type": "string"
          },
          "responseTime": {
            "type": "integer",
            "format": "int64"
          },
          "success": {
            "type": "boolean"
          },
          "available": {
            "type": "boolean"
          },
          "state": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "request": {
            "$ref": "#/components/schemas/Request"
          },
          "response": {
            "$ref": "#/components/schemas/Response"
          }
        }
      },
      "PageEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "order": {
            "type": "integer",
            "format": "int32"
          },
          "lastContributor": {
            "type": "string"
          },
          "published": {
            "type": "boolean"
          },
          "lastModificationDate": {
            "type": "integer",
            "format": "int64"
          },
          "contentType": {
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/PageSourceEntity"
          },
          "configuration": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "homepage": {
            "type": "boolean"
          },
          "parentId": {
            "type": "string"
          },
          "parentPath": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PageEntity"
            }
          },
          "generalConditions": {
            "type": "boolean",
            "readOnly": true
          },
          "contentRevisionId": {
            "$ref": "#/components/schemas/PageRevisionId"
          },
          "excluded_groups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "attached_media": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PageMediaEntity"
            }
          }
        }
      },
      "PageMediaEntity": {
        "type": "object",
        "properties": {
          "mediaHash": {
            "type": "string"
          },
          "mediaName": {
            "type": "string"
          },
          "attachedAt": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "PageRevisionId": {
        "type": "object",
        "properties": {
          "pageId": {
            "type": "string"
          },
          "revision": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "PageSourceEntity": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "configuration": {
            "type": "string"
          }
        }
      },
      "UpdatePageEntity": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "lastContributor": {
            "type": "string"
          },
          "order": {
            "type": "integer",
            "format": "int32"
          },
          "published": {
            "type": "boolean"
          },
          "source": {
            "$ref": "#/components/schemas/PageSourceEntity"
          },
          "configuration": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "homepage": {
            "type": "boolean"
          },
          "parentId": {
            "type": "string"
          },
          "excluded_groups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "attached_media": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PageMediaEntity"
            }
          }
        }
      },
      "ImportPageEntity": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "MARKDOWN",
              "SWAGGER",
              "FOLDER",
              "LINK",
              "ROOT",
              "SYSTEM_FOLDER",
              "TRANSLATION"
            ]
          },
          "published": {
            "type": "boolean"
          },
          "lastContributor": {
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/PageSourceEntity"
          },
          "configuration": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "excluded_groups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "NewPageEntity": {
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "MARKDOWN",
              "SWAGGER",
              "FOLDER",
              "LINK",
              "ROOT",
              "SYSTEM_FOLDER",
              "TRANSLATION"
            ]
          },
          "content": {
            "type": "string"
          },
          "order": {
            "type": "integer",
            "format": "int32"
          },
          "published": {
            "type": "boolean"
          },
          "lastContributor": {
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/PageSourceEntity"
          },
          "configuration": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "homepage": {
            "type": "boolean"
          },
          "parentId": {
            "type": "string"
          },
          "excluded_groups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "EventEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "PUBLISH_API",
              "PUBLISH_API_RESULT",
              "UNPUBLISH_API",
              "UNPUBLISH_API_RESULT",
              "START_API",
              "STOP_API",
              "GATEWAY_STARTED",
              "GATEWAY_STOPPED",
              "PUBLISH_DICTIONARY",
              "UNPUBLISH_DICTIONARY",
              "START_DICTIONARY",
              "STOP_DICTIONARY",
              "ALERT_NOTIFICATION"
            ]
          },
          "payload": {
            "type": "string"
          },
          "parentId": {
            "type": "string"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "user": {
            "$ref": "#/components/schemas/UserEntity"
          },
          "created_at": {
            "type": "integer",
            "format": "int64"
          },
          "updated_at": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "PlanEntity": {
        "required": [
          "paths"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "validation": {
            "type": "string",
            "enum": [
              "AUTO",
              "MANUAL"
            ]
          },
          "security": {
            "type": "string",
            "enum": [
              "KEY_LESS",
              "API_KEY",
              "OAUTH2",
              "JWT"
            ]
          },
          "securityDefinition": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "API",
              "CATALOG"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "STAGING",
              "PUBLISHED",
              "CLOSED",
              "DEPRECATED"
            ]
          },
          "api": {
            "type": "string"
          },
          "order": {
            "type": "integer",
            "format": "int32"
          },
          "characteristics": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "created_at": {
            "type": "integer",
            "format": "int64"
          },
          "updated_at": {
            "type": "integer",
            "format": "int64"
          },
          "published_at": {
            "type": "integer",
            "format": "int64"
          },
          "closed_at": {
            "type": "integer",
            "format": "int64"
          },
          "paths": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Path"
            }
          },
          "excluded_groups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "comment_required": {
            "type": "boolean"
          },
          "comment_message": {
            "type": "string"
          },
          "general_conditions": {
            "type": "string"
          },
          "selection_rule": {
            "type": "string"
          }
        }
      },
      "NewPlanEntity": {
        "required": [
          "description",
          "name",
          "paths",
          "security",
          "status",
          "type",
          "validation"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "validation": {
            "type": "string",
            "enum": [
              "AUTO",
              "MANUAL"
            ]
          },
          "security": {
            "type": "string",
            "enum": [
              "KEY_LESS",
              "API_KEY",
              "OAUTH2",
              "JWT"
            ]
          },
          "securityDefinition": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "API",
              "CATALOG"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "STAGING",
              "PUBLISHED",
              "CLOSED",
              "DEPRECATED"
            ]
          },
          "api": {
            "type": "string"
          },
          "characteristics": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "paths": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Path"
            }
          },
          "excluded_groups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "comment_required": {
            "type": "boolean"
          },
          "comment_message": {
            "type": "string"
          },
          "selection_rule": {
            "type": "string"
          },
          "general_conditions": {
            "type": "string"
          }
        }
      },
      "UpdatePlanEntity": {
        "required": [
          "description",
          "name",
          "order",
          "paths",
          "validation"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "validation": {
            "type": "string",
            "enum": [
              "AUTO",
              "MANUAL"
            ]
          },
          "characteristics": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "order": {
            "type": "integer",
            "format": "int32"
          },
          "securityDefinition": {
            "type": "string"
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "paths": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Path"
            }
          },
          "excluded_groups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "comment_required": {
            "type": "boolean"
          },
          "comment_message": {
            "type": "string"
          },
          "general_conditions": {
            "type": "string"
          },
          "selection_rule": {
            "type": "string"
          }
        }
      },
      "PagedResultSubscriptionEntity": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriptionEntity"
            }
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "page": {
            "$ref": "#/components/schemas/Page"
          }
        }
      },
      "SubscriptionEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "api": {
            "type": "string"
          },
          "plan": {
            "type": "string"
          },
          "application": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "REJECTED",
              "ACCEPTED",
              "CLOSED",
              "PAUSED",
              "RESUMED"
            ]
          },
          "request": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "keys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "processed_at": {
            "type": "integer",
            "format": "int64"
          },
          "processed_by": {
            "type": "string"
          },
          "subscribed_by": {
            "type": "string"
          },
          "starting_at": {
            "type": "integer",
            "format": "int64"
          },
          "ending_at": {
            "type": "integer",
            "format": "int64"
          },
          "created_at": {
            "type": "integer",
            "format": "int64"
          },
          "updated_at": {
            "type": "integer",
            "format": "int64"
          },
          "closed_at": {
            "type": "integer",
            "format": "int64"
          },
          "paused_at": {
            "type": "integer",
            "format": "int64"
          },
          "client_id": {
            "type": "string"
          }
        }
      },
      "Api": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "Application": {
        "type": "object",
        "properties": {
          "registration": {
            "$ref": "#/components/schemas/ClientRegistration"
          },
          "types": {
            "$ref": "#/components/schemas/ApplicationTypes"
          }
        }
      },
      "Plan": {
        "type": "object",
        "properties": {
          "security": {
            "$ref": "#/components/schemas/PlanSecurity"
          }
        }
      },
      "Subscription": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "api": {
            "$ref": "#/components/schemas/Api"
          },
          "plan": {
            "$ref": "#/components/schemas/Plan"
          },
          "application": {
            "$ref": "#/components/schemas/Application"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "REJECTED",
              "ACCEPTED",
              "CLOSED",
              "PAUSED",
              "RESUMED"
            ]
          },
          "request": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "processed_at": {
            "type": "integer",
            "format": "int64"
          },
          "processed_by": {
            "type": "string"
          },
          "subscribed_by": {
            "$ref": "#/components/schemas/User"
          },
          "starting_at": {
            "type": "integer",
            "format": "int64"
          },
          "ending_at": {
            "type": "integer",
            "format": "int64"
          },
          "created_at": {
            "type": "integer",
            "format": "int64"
          },
          "updated_at": {
            "type": "integer",
            "format": "int64"
          },
          "closed_at": {
            "type": "integer",
            "format": "int64"
          },
          "paused_at": {
            "type": "integer",
            "format": "int64"
          },
          "client_id": {
            "type": "string"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "displayed": {
            "type": "boolean"
          }
        }
      },
      "ProcessSubscriptionEntity": {
        "required": [
          "accepted"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "accepted": {
            "type": "boolean"
          },
          "reason": {
            "type": "string"
          },
          "starting_at": {
            "type": "integer",
            "format": "int64"
          },
          "ending_at": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "UpdateSubscriptionEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "starting_at": {
            "type": "integer",
            "format": "int64"
          },
          "ending_at": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "TransferSubscriptionEntity": {
        "required": [
          "plan"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "plan": {
            "type": "string"
          }
        }
      },
      "ApplicationEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Application's uuid.",
            "example": "00f8c9e7-78fc-4907-b8c9-e778fc790750"
          },
          "name": {
            "type": "string",
            "description": "Application's name. Duplicate names can exists.",
            "example": "My App"
          },
          "description": {
            "type": "string",
            "description": "Application's description. A short description of your App.",
            "example": "I can use a hundred characters to describe this App."
          },
          "groups": {
            "type": "array",
            "description": "Application's groups. Used to add team in your App.",
            "example": "['MY_GROUP1', 'MY_GROUP2']",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "status": {
            "type": "string",
            "description": "if the app is ACTIVE or ARCHIVED.",
            "example": "ACTIVE"
          },
          "type": {
            "type": "string",
            "description": "a string to describe the type of your app.",
            "example": "iOS"
          },
          "picture": {
            "type": "string"
          },
          "background": {
            "type": "string"
          },
          "created_at": {
            "type": "integer",
            "description": "The date (as a timestamp) when the application was created.",
            "format": "int64",
            "example": 1581256457163
          },
          "updated_at": {
            "type": "integer",
            "description": "The last date (as a timestamp) when the application was updated.",
            "format": "int64",
            "example": 1581256457163
          },
          "owner": {
            "$ref": "#/components/schemas/PrimaryOwnerEntity"
          },
          "settings": {
            "$ref": "#/components/schemas/ApplicationSettings"
          },
          "disable_membership_notifications": {
            "type": "boolean"
          }
        }
      },
      "ApplicationSettings": {
        "type": "object",
        "properties": {
          "app": {
            "$ref": "#/components/schemas/SimpleApplicationSettings"
          },
          "oauth": {
            "$ref": "#/components/schemas/OAuthClientSettings"
          }
        }
      },
      "OAuthClientSettings": {
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string"
          },
          "client_secret": {
            "type": "string"
          },
          "redirect_uris": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "client_uri": {
            "type": "string"
          },
          "logo_uri": {
            "type": "string"
          },
          "response_types": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "grant_types": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "application_type": {
            "type": "string"
          },
          "renew_client_secret_supported": {
            "type": "boolean"
          }
        }
      },
      "SimpleApplicationSettings": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          }
        }
      },
      "ApiMetadataEntity": {
        "required": [
          "key",
          "value"
        ],
        "type": "object",
        "properties": {
          "key": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "format": {
            "type": "string",
            "enum": [
              "STRING",
              "NUMERIC",
              "BOOLEAN",
              "DATE",
              "MAIL",
              "URL"
            ]
          },
          "value": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string"
          },
          "defaultValue": {
            "type": "string"
          },
          "apiId": {
            "type": "string"
          }
        }
      },
      "UpdateApiMetadataEntity": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "name": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string"
          },
          "format": {
            "type": "string",
            "enum": [
              "STRING",
              "NUMERIC",
              "BOOLEAN",
              "DATE",
              "MAIL",
              "URL"
            ]
          },
          "defaultValue": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "hidden": {
            "type": "boolean"
          },
          "apiId": {
            "type": "string"
          }
        }
      },
      "NewApiMetadataEntity": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string"
          },
          "format": {
            "type": "string",
            "enum": [
              "STRING",
              "NUMERIC",
              "BOOLEAN",
              "DATE",
              "MAIL",
              "URL"
            ]
          },
          "defaultValue": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "hidden": {
            "type": "boolean"
          },
          "apiId": {
            "type": "string"
          }
        }
      },
      "RatingAnswerEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "user": {
            "type": "string"
          },
          "userDisplayName": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "createdAt": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "RatingEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "api": {
            "type": "string"
          },
          "user": {
            "type": "string"
          },
          "userDisplayName": {
            "type": "string"
          },
          "rate": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          },
          "title": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "createdAt": {
            "type": "integer",
            "format": "int64"
          },
          "updatedAt": {
            "type": "integer",
            "format": "int64"
          },
          "answers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RatingAnswerEntity"
            }
          }
        }
      },
      "RatingSummaryEntity": {
        "type": "object",
        "properties": {
          "api": {
            "type": "string"
          },
          "numberOfRatings": {
            "type": "integer",
            "format": "int32"
          },
          "averageRate": {
            "type": "number",
            "format": "double"
          },
          "numberOfRatingsByRate": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "NewRatingAnswerEntity": {
        "type": "object",
        "properties": {
          "ratingId": {
            "type": "string"
          },
          "comment": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string"
          }
        }
      },
      "UpdateRatingEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "api": {
            "type": "string"
          },
          "rate": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          },
          "title": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string"
          },
          "comment": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string"
          }
        }
      },
      "PageRatingEntity": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RatingEntity"
            }
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "pageElements": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "NewRatingEntity": {
        "type": "object",
        "properties": {
          "api": {
            "type": "string"
          },
          "rate": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          },
          "title": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string"
          },
          "comment": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string"
          }
        }
      },
      "AuditEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "referenceId": {
            "type": "string"
          },
          "referenceType": {
            "type": "string"
          },
          "user": {
            "type": "string"
          },
          "createdAt": {
            "type": "integer",
            "format": "int64"
          },
          "event": {
            "type": "string"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "patch": {
            "type": "string"
          }
        }
      },
      "MetadataPage": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "pageElements": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "MetadataPageAuditEntity": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditEntity"
            }
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "pageElements": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "GenericNotificationConfigEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "referenceType": {
            "type": "string"
          },
          "referenceId": {
            "type": "string"
          },
          "notifier": {
            "type": "string"
          },
          "config": {
            "type": "string"
          },
          "hooks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "useSystemProxy": {
            "type": "boolean"
          },
          "config_type": {
            "type": "string",
            "enum": [
              "PORTAL",
              "GENERIC"
            ]
          }
        }
      },
      "PortalNotificationConfigEntity": {
        "type": "object",
        "properties": {
          "referenceType": {
            "type": "string"
          },
          "referenceId": {
            "type": "string"
          },
          "user": {
            "type": "string"
          },
          "hooks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "config_type": {
            "type": "string",
            "enum": [
              "PORTAL",
              "GENERIC"
            ]
          },
          "name": {
            "type": "string"
          }
        }
      },
      "AggregationCondition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Condition"
          },
          {
            "required": [
              "duration",
              "function",
              "operator",
              "threshold"
            ],
            "type": "object",
            "properties": {
              "function": {
                "type": "string",
                "readOnly": true,
                "enum": [
                  "COUNT",
                  "AVG",
                  "MIN",
                  "MAX",
                  "P50",
                  "P90",
                  "P95",
                  "P99"
                ]
              },
              "property": {
                "type": "string",
                "readOnly": true
              },
              "operator": {
                "type": "string",
                "readOnly": true,
                "enum": [
                  "LT",
                  "LTE",
                  "GTE",
                  "GT"
                ]
              },
              "threshold": {
                "type": "number",
                "format": "double",
                "readOnly": true
              },
              "timeUnit": {
                "type": "string",
                "readOnly": true,
                "enum": [
                  "NANOSECONDS",
                  "MICROSECONDS",
                  "MILLISECONDS",
                  "SECONDS",
                  "MINUTES",
                  "HOURS",
                  "DAYS"
                ]
              },
              "duration": {
                "type": "integer",
                "format": "int64",
                "readOnly": true
              },
              "projections": {
                "type": "array",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/Projection"
                }
              }
            }
          }
        ]
      },
      "AlertEventRuleEntity": {
        "type": "object",
        "properties": {
          "event": {
            "type": "string"
          }
        }
      },
      "AlertTriggerEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "conditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Condition"
            }
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter"
            }
          },
          "dampening": {
            "$ref": "#/components/schemas/Dampening"
          },
          "notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Notification"
            }
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "severity": {
            "type": "string",
            "enum": [
              "INFO",
              "WARNING",
              "CRITICAL"
            ]
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "template": {
            "type": "boolean"
          },
          "reference_type": {
            "type": "string",
            "enum": [
              "API",
              "APPLICATION",
              "PLATFORM"
            ]
          },
          "reference_id": {
            "type": "string"
          },
          "created_at": {
            "type": "integer",
            "format": "int64"
          },
          "updated_at": {
            "type": "integer",
            "format": "int64"
          },
          "last_alert_at": {
            "type": "integer",
            "format": "int64"
          },
          "last_alert_message": {
            "type": "string"
          },
          "counters": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int32"
            }
          },
          "event_rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlertEventRuleEntity"
            }
          },
          "parent_id": {
            "type": "string"
          }
        }
      },
      "CompareCondition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Condition"
          },
          {
            "required": [
              "multiplier",
              "operator",
              "property",
              "property2"
            ],
            "type": "object",
            "properties": {
              "property": {
                "type": "string",
                "readOnly": true
              },
              "operator": {
                "type": "string",
                "readOnly": true,
                "enum": [
                  "LT",
                  "LTE",
                  "GTE",
                  "GT"
                ]
              },
              "multiplier": {
                "type": "number",
                "format": "double",
                "readOnly": true
              },
              "property2": {
                "type": "string",
                "readOnly": true
              }
            }
          }
        ]
      },
      "Condition": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "STRING",
              "THRESHOLD",
              "THRESHOLD_RANGE",
              "RATE",
              "FREQUENCY",
              "AGGREGATION",
              "COMPARE",
              "STRING_COMPARE",
              "MISSING_DATA"
            ]
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Dampening": {
        "required": [
          "mode"
        ],
        "type": "object",
        "properties": {
          "mode": {
            "type": "string",
            "readOnly": true,
            "enum": [
              "STRICT_COUNT",
              "RELAXED_COUNT",
              "RELAXED_TIME",
              "STRICT_TIME"
            ]
          },
          "trueEvaluations": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "totalEvaluations": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "duration": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "timeUnit": {
            "type": "string",
            "readOnly": true,
            "enum": [
              "NANOSECONDS",
              "MICROSECONDS",
              "MILLISECONDS",
              "SECONDS",
              "MINUTES",
              "HOURS",
              "DAYS"
            ]
          }
        }
      },
      "Filter": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "STRING",
              "THRESHOLD",
              "THRESHOLD_RANGE",
              "RATE",
              "FREQUENCY",
              "AGGREGATION",
              "COMPARE",
              "STRING_COMPARE",
              "MISSING_DATA"
            ]
          }
        }
      },
      "MissingDataCondition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Condition"
          },
          {
            "required": [
              "duration"
            ],
            "type": "object",
            "properties": {
              "duration": {
                "type": "integer",
                "format": "int64",
                "readOnly": true
              },
              "timeUnit": {
                "type": "string",
                "readOnly": true,
                "enum": [
                  "NANOSECONDS",
                  "MICROSECONDS",
                  "MILLISECONDS",
                  "SECONDS",
                  "MINUTES",
                  "HOURS",
                  "DAYS"
                ]
              },
              "projections": {
                "type": "array",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/Projection"
                }
              }
            }
          }
        ]
      },
      "Notification": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "configuration": {
            "type": "string"
          }
        }
      },
      "Projection": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "PROPERTY"
            ]
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "PropertyProjection": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Projection"
          },
          {
            "required": [
              "property"
            ],
            "type": "object",
            "properties": {
              "property": {
                "type": "string",
                "readOnly": true
              }
            }
          }
        ]
      },
      "RateCondition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Condition"
          },
          {
            "required": [
              "comparison",
              "duration",
              "operator",
              "threshold"
            ],
            "type": "object",
            "properties": {
              "operator": {
                "type": "string",
                "readOnly": true,
                "enum": [
                  "LT",
                  "LTE",
                  "GTE",
                  "GT"
                ]
              },
              "threshold": {
                "type": "number",
                "format": "double",
                "readOnly": true
              },
              "comparison": {
                "$ref": "#/components/schemas/SingleValueCondition"
              },
              "duration": {
                "type": "integer",
                "format": "int64",
                "readOnly": true
              },
              "timeUnit": {
                "type": "string",
                "readOnly": true,
                "enum": [
                  "NANOSECONDS",
                  "MICROSECONDS",
                  "MILLISECONDS",
                  "SECONDS",
                  "MINUTES",
                  "HOURS",
                  "DAYS"
                ]
              },
              "projections": {
                "type": "array",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/Projection"
                }
              }
            }
          }
        ]
      },
      "SingleValueCondition": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "STRING",
              "THRESHOLD",
              "THRESHOLD_RANGE",
              "RATE",
              "FREQUENCY",
              "AGGREGATION",
              "COMPARE",
              "STRING_COMPARE",
              "MISSING_DATA"
            ]
          }
        }
      },
      "StringCompareCondition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Condition"
          },
          {
            "required": [
              "operator",
              "property",
              "property2"
            ],
            "type": "object",
            "properties": {
              "property": {
                "type": "string",
                "readOnly": true
              },
              "operator": {
                "type": "string",
                "readOnly": true,
                "enum": [
                  "EQUALS",
                  "NOT_EQUALS",
                  "STARTS_WITH",
                  "ENDS_WITH",
                  "CONTAINS",
                  "MATCHES"
                ]
              },
              "property2": {
                "type": "string",
                "readOnly": true
              },
              "ignoreCase": {
                "type": "boolean",
                "readOnly": true
              }
            }
          }
        ]
      },
      "StringCondition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Condition"
          },
          {
            "required": [
              "operator",
              "pattern",
              "property"
            ],
            "type": "object",
            "properties": {
              "property": {
                "type": "string",
                "readOnly": true
              },
              "operator": {
                "type": "string",
                "readOnly": true,
                "enum": [
                  "EQUALS",
                  "NOT_EQUALS",
                  "STARTS_WITH",
                  "ENDS_WITH",
                  "CONTAINS",
                  "MATCHES"
                ]
              },
              "pattern": {
                "type": "string",
                "readOnly": true
              },
              "ignoreCase": {
                "type": "boolean",
                "readOnly": true
              }
            }
          }
        ]
      },
      "ThresholdCondition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Condition"
          },
          {
            "required": [
              "operator",
              "property",
              "threshold"
            ],
            "type": "object",
            "properties": {
              "property": {
                "type": "string",
                "readOnly": true
              },
              "operator": {
                "type": "string",
                "readOnly": true,
                "enum": [
                  "LT",
                  "LTE",
                  "GTE",
                  "GT"
                ]
              },
              "threshold": {
                "type": "number",
                "format": "double",
                "readOnly": true
              }
            }
          }
        ]
      },
      "ThresholdRangeCondition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Condition"
          },
          {
            "required": [
              "operatorHigh",
              "operatorLow",
              "property",
              "thresholdHigh",
              "thresholdLow"
            ],
            "type": "object",
            "properties": {
              "property": {
                "type": "string",
                "readOnly": true
              },
              "operatorLow": {
                "type": "string",
                "readOnly": true,
                "enum": [
                  "INCLUSIVE",
                  "EXCLUSIVE"
                ]
              },
              "thresholdLow": {
                "type": "number",
                "format": "double",
                "readOnly": true
              },
              "operatorHigh": {
                "type": "string",
                "readOnly": true,
                "enum": [
                  "INCLUSIVE",
                  "EXCLUSIVE"
                ]
              },
              "thresholdHigh": {
                "type": "number",
                "format": "double",
                "readOnly": true
              }
            }
          }
        ]
      },
      "UpdateAlertTriggerEntity": {
        "required": [
          "name",
          "severity"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "conditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Condition"
            }
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter"
            }
          },
          "dampening": {
            "$ref": "#/components/schemas/Dampening"
          },
          "notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Notification"
            }
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "severity": {
            "type": "string",
            "enum": [
              "INFO",
              "WARNING",
              "CRITICAL"
            ]
          },
          "description": {
            "type": "string"
          },
          "reference_type": {
            "type": "string",
            "enum": [
              "API",
              "APPLICATION",
              "PLATFORM"
            ]
          },
          "reference_id": {
            "type": "string"
          },
          "event_rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlertEventRuleEntity"
            }
          }
        }
      },
      "AlertStatusEntity": {
        "type": "object",
        "properties": {
          "available_plugins": {
            "type": "integer",
            "format": "int32"
          },
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "NewAlertTriggerEntity": {
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "conditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Condition"
            }
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter"
            }
          },
          "dampening": {
            "$ref": "#/components/schemas/Dampening"
          },
          "notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Notification"
            }
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "severity": {
            "type": "string",
            "enum": [
              "INFO",
              "WARNING",
              "CRITICAL"
            ]
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "template": {
            "type": "boolean"
          },
          "reference_type": {
            "type": "string",
            "enum": [
              "API",
              "APPLICATION",
              "PLATFORM"
            ]
          },
          "reference_id": {
            "type": "string"
          },
          "event_rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlertEventRuleEntity"
            }
          }
        }
      },
      "AlertEventEntity": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "created_at": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "PageAlertEventEntity": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlertEventEntity"
            }
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "pageElements": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ApiQualityRuleEntity": {
        "type": "object",
        "properties": {
          "api": {
            "type": "string"
          },
          "checked": {
            "type": "boolean"
          },
          "quality_rule": {
            "type": "string"
          },
          "created_at": {
            "type": "integer",
            "format": "int64"
          },
          "updated_at": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "UpdateApiQualityRuleEntity": {
        "type": "object",
        "properties": {
          "api": {
            "type": "string"
          },
          "checked": {
            "type": "boolean"
          },
          "quality_rule": {
            "type": "string"
          }
        }
      },
      "NewApiQualityRuleEntity": {
        "type": "object",
        "properties": {
          "api": {
            "type": "string"
          },
          "checked": {
            "type": "boolean"
          },
          "quality_rule": {
            "type": "string"
          }
        }
      },
      "UpdateApiEntity": {
        "required": [
          "description",
          "name",
          "proxy",
          "version",
          "visibility"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Api's name. Duplicate names can exists.",
            "example": "My Api"
          },
          "version": {
            "type": "string",
            "description": "Api's version. It's a simple string only used in the portal.",
            "example": "v1.0"
          },
          "description": {
            "type": "string",
            "description": "API's description. A short description of your API.",
            "example": "I can use a hundred characters to describe this API."
          },
          "services": {
            "$ref": "#/components/schemas/Services"
          },
          "resources": {
            "type": "array",
            "description": "The list of API resources used by policies like cache resources or oauth2",
            "items": {
              "$ref": "#/components/schemas/Resource"
            }
          },
          "visibility": {
            "type": "string",
            "description": "The visibility of the API regarding the portal.",
            "example": "PUBLIC",
            "enum": [
              "PUBLIC",
              "PRIVATE"
            ]
          },
          "tags": {
            "type": "array",
            "description": "the list of sharding tags associated with this API.",
            "example": "public, private",
            "items": {
              "type": "string",
              "properties": {}
            }
          },
          "picture": {
            "type": "string",
            "description": "the API logo encoded in base64"
          },
          "categories": {
            "type": "array",
            "description": "the list of categories associated with this API",
            "example": "Product, Customer, Misc",
            "items": {
              "type": "string",
              "properties": {}
            }
          },
          "labels": {
            "type": "array",
            "description": "the free list of labels associated with this API",
            "example": "json, read_only, awesome",
            "items": {
              "type": "string",
              "properties": {}
            }
          },
          "groups": {
            "type": "array",
            "description": "API's groups. Used to add team in your API.",
            "example": "['MY_GROUP1', 'MY_GROUP2']",
            "items": {
              "type": "string",
              "properties": {}
            }
          },
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiMetadataEntity"
            }
          },
          "background": {
            "type": "string",
            "description": "the API background encoded in base64"
          },
          "proxy": {
            "$ref": "#/components/schemas/Proxy"
          },
          "paths": {
            "type": "object",
            "description": "a map where you can associate a path to a configuration (the policies configuration)",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Rule"
              }
            },
            "description": "a map where you can associate a path to a configuration (the policies configuration)"
          },
          "properties": {
            "$ref": "#/components/schemas/Properties"
          },
          "path_mappings": {
            "type": "array",
            "description": "A list of paths used to aggregate data in analytics",
            "example": "/products/:productId, /products/:productId/media",
            "items": {
              "type": "string",
              "properties": {}
            }
          },
          "response_templates": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ResponseTemplates"
            },
            "description": "A map that allows you to configure the output of a request based on the event throws by the gateway. Example : Quota exceeded, api-ky is missing, ..."
          },
          "lifecycle_state": {
            "type": "string",
            "enum": [
              "CREATED",
              "PUBLISHED",
              "UNPUBLISHED",
              "DEPRECATED",
              "ARCHIVED"
            ]
          },
          "disable_membership_notifications": {
            "type": "boolean"
          }
        }
      },
      "MessageEntity": {
        "type": "object",
        "properties": {
          "recipient": {
            "$ref": "#/components/schemas/MessageRecipientEntity"
          },
          "channel": {
            "type": "string",
            "enum": [
              "MAIL",
              "PORTAL",
              "HTTP"
            ]
          },
          "title": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "params": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "useSystemProxy": {
            "type": "boolean"
          }
        }
      },
      "MessageRecipientEntity": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "role_scope": {
            "type": "string"
          },
          "role_value": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ApiHeaderEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "order": {
            "type": "integer",
            "format": "int32"
          },
          "created_at": {
            "type": "integer",
            "format": "int64"
          },
          "updated_at": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "NewApiEntity": {
        "required": [
          "contextPath",
          "description",
          "endpoint",
          "name",
          "version"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Api's name. Duplicate names can exists.",
            "example": "My Api"
          },
          "version": {
            "type": "string",
            "description": "Api's version. It's a simple string only used in the portal.",
            "example": "v1.0"
          },
          "description": {
            "type": "string",
            "description": "API's description. A short description of your API.",
            "example": "I can use a hundred characters to describe this API."
          },
          "contextPath": {
            "type": "string",
            "description": "API's context path.",
            "example": "/my-awesome-api"
          },
          "endpoint": {
            "type": "string",
            "description": "API's first endpoint (target url).",
            "example": "https://local-dc:8081/api"
          },
          "groups": {
            "type": "array",
            "description": "API's groups. Used to add team in your API.",
            "example": "['MY_GROUP1', 'MY_GROUP2']",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "paths": {
            "type": "array",
            "description": "API's paths. A json representation of the design of each path.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Hook": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string"
          },
          "hidden": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "scope": {
            "type": "string",
            "enum": [
              "API",
              "APPLICATION",
              "PORTAL"
            ]
          },
          "category": {
            "type": "string"
          }
        }
      },
      "VerifyApiParam": {
        "required": [
          "context_path"
        ],
        "type": "object",
        "properties": {
          "context_path": {
            "type": "string"
          }
        }
      },
      "ApplicationListItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Application's uuid.",
            "example": "00f8c9e7-78fc-4907-b8c9-e778fc790750"
          },
          "name": {
            "type": "string",
            "description": "Application's name. Duplicate names can exists.",
            "example": "My App"
          },
          "description": {
            "type": "string",
            "description": "Application's description. A short description of your App.",
            "example": "I can use a hundred characters to describe this App."
          },
          "groups": {
            "type": "array",
            "description": "Application's groups. Used to add team in your App.",
            "example": "['MY_GROUP1', 'MY_GROUP2']",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "status": {
            "type": "string",
            "description": "if the app is ACTIVE or ARCHIVED.",
            "example": "ACTIVE"
          },
          "type": {
            "type": "string",
            "description": "a string to describe the type of your app.",
            "example": "iOS"
          },
          "picture": {
            "type": "string"
          },
          "background": {
            "type": "string"
          },
          "created_at": {
            "type": "integer",
            "description": "The date (as a timestamp) when the application was created.",
            "format": "int64",
            "example": 1581256457163
          },
          "updated_at": {
            "type": "integer",
            "description": "The last date (as a timestamp) when the application was updated.",
            "format": "int64",
            "example": 1581256457163
          },
          "owner": {
            "$ref": "#/components/schemas/PrimaryOwnerEntity"
          },
          "settings": {
            "$ref": "#/components/schemas/ApplicationListItemSettings"
          },
          "picture_url": {
            "type": "string"
          },
          "background_url": {
            "type": "string"
          }
        }
      },
      "ApplicationListItemSettings": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          }
        }
      },
      "NewApplicationEntity": {
        "required": [
          "description",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Application's name. Duplicate names can exists.",
            "example": "My App"
          },
          "description": {
            "type": "string",
            "description": "Application's description. A short description of your App.",
            "example": "I can use a hundred characters to describe this App."
          },
          "settings": {
            "$ref": "#/components/schemas/ApplicationSettings"
          },
          "type": {
            "type": "string",
            "description": "a string to describe the type of your app.",
            "example": "iOS"
          },
          "clientId": {
            "type": "string"
          },
          "groups": {
            "type": "array",
            "description": "Application's groups. Used to add team in your App.",
            "example": "['MY_GROUP1', 'MY_GROUP2']",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "picture": {
            "type": "string"
          },
          "background": {
            "type": "string"
          }
        }
      },
      "UpdateApplicationEntity": {
        "required": [
          "description",
          "name",
          "settings"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Application's name. Duplicate names can exists.",
            "example": "My App"
          },
          "description": {
            "type": "string",
            "description": "Application's description. A short description of your App.",
            "example": "I can use a hundred characters to describe this App."
          },
          "picture": {
            "type": "string"
          },
          "settings": {
            "$ref": "#/components/schemas/ApplicationSettings"
          },
          "groups": {
            "type": "array",
            "description": "Application's groups. Used to add team in your App.",
            "example": "['MY_GROUP1', 'MY_GROUP2']",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "type": {
            "type": "string",
            "description": "a string to describe the type of your app.",
            "example": "iOS"
          },
          "clientId": {
            "type": "string"
          },
          "background": {
            "type": "string"
          },
          "disable_membership_notifications": {
            "type": "boolean"
          }
        }
      },
      "ApplicationMembership": {
        "required": [
          "role"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User's technical identifier."
          },
          "reference": {
            "type": "string",
            "description": "User's reference for user providing from an identity provider."
          },
          "role": {
            "type": "string",
            "description": "Role's name"
          }
        }
      },
      "NewSubscriptionEntity": {
        "type": "object",
        "properties": {
          "application": {
            "type": "string"
          },
          "plan": {
            "type": "string"
          },
          "request": {
            "type": "string"
          },
          "generalConditionsContentRevision": {
            "$ref": "#/components/schemas/PageRevisionId"
          },
          "generalConditionsAccepted": {
            "type": "boolean"
          }
        }
      },
      "SubscribedApi": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "ApplicationRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "transactionId": {
            "type": "string"
          },
          "uri": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "method": {
            "type": "string",
            "enum": [
              "CONNECT",
              "DELETE",
              "GET",
              "HEAD",
              "OPTIONS",
              "PATCH",
              "POST",
              "PUT",
              "TRACE",
              "OTHER"
            ]
          },
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "responseTime": {
            "type": "integer",
            "format": "int64"
          },
          "requestContentLength": {
            "type": "integer",
            "format": "int64"
          },
          "responseContentLength": {
            "type": "integer",
            "format": "int64"
          },
          "plan": {
            "type": "string"
          },
          "api": {
            "type": "string"
          },
          "request": {
            "$ref": "#/components/schemas/Request"
          },
          "response": {
            "$ref": "#/components/schemas/Response"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "host": {
            "type": "string"
          },
          "user": {
            "type": "string"
          },
          "securityType": {
            "type": "string"
          },
          "securityToken": {
            "type": "string"
          }
        }
      },
      "ApplicationMetadataEntity": {
        "required": [
          "key",
          "value"
        ],
        "type": "object",
        "properties": {
          "key": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "format": {
            "type": "string",
            "enum": [
              "STRING",
              "NUMERIC",
              "BOOLEAN",
              "DATE",
              "MAIL",
              "URL"
            ]
          },
          "value": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string"
          },
          "defaultValue": {
            "type": "string"
          },
          "applicationId": {
            "type": "string"
          }
        }
      },
      "UpdateApplicationMetadataEntity": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "name": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string"
          },
          "format": {
            "type": "string",
            "enum": [
              "STRING",
              "NUMERIC",
              "BOOLEAN",
              "DATE",
              "MAIL",
              "URL"
            ]
          },
          "defaultValue": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "hidden": {
            "type": "boolean"
          },
          "applicationId": {
            "type": "string"
          }
        }
      },
      "NewApplicationMetadataEntity": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string"
          },
          "format": {
            "type": "string",
            "enum": [
              "STRING",
              "NUMERIC",
              "BOOLEAN",
              "DATE",
              "MAIL",
              "URL"
            ]
          },
          "defaultValue": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "hidden": {
            "type": "boolean"
          },
          "applicationId": {
            "type": "string"
          }
        }
      },
      "DashboardEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "order": {
            "type": "integer",
            "format": "int32"
          },
          "enabled": {
            "type": "boolean"
          },
          "definition": {
            "type": "string"
          },
          "reference_type": {
            "type": "string"
          },
          "reference_id": {
            "type": "string"
          },
          "query_filter": {
            "type": "string"
          },
          "created_at": {
            "type": "integer",
            "format": "int64"
          },
          "updated_at": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "UpdateDashboardEntity": {
        "required": [
          "name",
          "order",
          "reference_id",
          "reference_type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string"
          },
          "order": {
            "type": "integer",
            "format": "int32"
          },
          "enabled": {
            "type": "boolean"
          },
          "definition": {
            "type": "string"
          },
          "reference_type": {
            "type": "string",
            "enum": [
              "API",
              "APPLICATION",
              "PLATFORM"
            ]
          },
          "reference_id": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string"
          },
          "query_filter": {
            "type": "string"
          }
        }
      },
      "NewDashboardEntity": {
        "required": [
          "name",
          "reference_id",
          "reference_type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "definition": {
            "type": "string"
          },
          "reference_type": {
            "type": "string",
            "enum": [
              "API",
              "APPLICATION",
              "PLATFORM"
            ]
          },
          "reference_id": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string"
          },
          "query_filter": {
            "type": "string"
          }
        }
      },
      "GroupEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "manageable": {
            "type": "boolean"
          },
          "roles": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "event_rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupEventRuleEntity"
            }
          },
          "created_at": {
            "type": "integer",
            "format": "int64"
          },
          "updated_at": {
            "type": "integer",
            "format": "int64"
          },
          "max_invitation": {
            "type": "integer",
            "format": "int32"
          },
          "lock_api_role": {
            "type": "boolean"
          },
          "lock_application_role": {
            "type": "boolean"
          },
          "system_invitation": {
            "type": "boolean"
          },
          "email_invitation": {
            "type": "boolean"
          },
          "disable_membership_notifications": {
            "type": "boolean"
          }
        }
      },
      "GroupEventRuleEntity": {
        "type": "object",
        "properties": {
          "event": {
            "type": "string"
          }
        }
      },
      "UpdateGroupEntity": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "roles": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "event_rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupEventRuleEntity"
            }
          },
          "max_invitation": {
            "type": "integer",
            "format": "int32"
          },
          "lock_api_role": {
            "type": "boolean"
          },
          "lock_application_role": {
            "type": "boolean"
          },
          "system_invitation": {
            "type": "boolean"
          },
          "email_invitation": {
            "type": "boolean"
          },
          "disable_membership_notifications": {
            "type": "boolean"
          }
        }
      },
      "GroupMemberEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "roles": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "created_at": {
            "type": "integer",
            "format": "int64"
          },
          "updated_at": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "GroupMembership": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "reference": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MemberRoleEntity"
            }
          }
        }
      },
      "MemberRoleEntity": {
        "type": "object",
        "properties": {
          "scope": {
            "type": "string",
            "enum": [
              "API",
              "APPLICATION",
              "GROUP",
              "ENVIRONMENT",
              "ORGANIZATION",
              "PLATFORM"
            ]
          },
          "name": {
            "type": "string"
          }
        }
      },
      "InvitationEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "reference_type": {
            "type": "string",
            "enum": [
              "API",
              "APPLICATION",
              "GROUP"
            ]
          },
          "reference_id": {
            "type": "string"
          },
          "api_role": {
            "type": "string"
          },
          "application_role": {
            "type": "string"
          },
          "created_at": {
            "type": "integer",
            "format": "int64"
          },
          "updated_at": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "UpdateInvitationEntity": {
        "required": [
          "email",
          "reference_id",
          "reference_type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "reference_type": {
            "type": "string",
            "enum": [
              "API",
              "APPLICATION",
              "GROUP"
            ]
          },
          "reference_id": {
            "type": "string"
          },
          "api_role": {
            "type": "string"
          },
          "application_role": {
            "type": "string"
          }
        }
      },
      "NewInvitationEntity": {
        "required": [
          "email",
          "reference_id",
          "reference_type"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "reference_type": {
            "type": "string",
            "enum": [
              "API",
              "APPLICATION",
              "GROUP"
            ]
          },
          "reference_id": {
            "type": "string"
          },
          "api_role": {
            "type": "string"
          },
          "application_role": {
            "type": "string"
          }
        }
      },
      "NewGroupEntity": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "event_rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupEventRuleEntity"
            }
          },
          "max_invitation": {
            "type": "integer",
            "format": "int32"
          },
          "lock_api_role": {
            "type": "boolean"
          },
          "lock_application_role": {
            "type": "boolean"
          },
          "system_invitation": {
            "type": "boolean"
          },
          "email_invitation": {
            "type": "boolean"
          },
          "disable_membership_notifications": {
            "type": "boolean"
          }
        }
      },
      "TagEntity": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "restricted_groups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UpdateTagEntity": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "restricted_groups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "NewTagEntity": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "restricted_groups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "TenantEntity": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "UpdateTenantEntity": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "NewTenantEntity": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "MetadataEntity": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "name": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string"
          },
          "format": {
            "type": "string",
            "enum": [
              "STRING",
              "NUMERIC",
              "BOOLEAN",
              "DATE",
              "MAIL",
              "URL"
            ]
          },
          "value": {
            "type": "string"
          }
        }
      },
      "UpdateMetadataEntity": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "name": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string"
          },
          "format": {
            "type": "string",
            "enum": [
              "STRING",
              "NUMERIC",
              "BOOLEAN",
              "DATE",
              "MAIL",
              "URL"
            ]
          },
          "value": {
            "type": "string"
          },
          "hidden": {
            "type": "boolean"
          }
        }
      },
      "NewMetadataEntity": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string"
          },
          "format": {
            "type": "string",
            "enum": [
              "STRING",
              "NUMERIC",
              "BOOLEAN",
              "DATE",
              "MAIL",
              "URL"
            ]
          },
          "value": {
            "type": "string"
          },
          "hidden": {
            "type": "boolean"
          }
        }
      },
      "TopApiEntity": {
        "type": "object",
        "properties": {
          "api": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "order": {
            "type": "integer",
            "format": "int32"
          },
          "picture_url": {
            "type": "string"
          }
        }
      },
      "UpdateTopApiEntity": {
        "type": "object",
        "properties": {
          "api": {
            "type": "string"
          },
          "order": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "NewTopApiEntity": {
        "type": "object",
        "properties": {
          "api": {
            "type": "string"
          }
        }
      },
      "PlanSecurityEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "policy": {
            "type": "string"
          }
        }
      },
      "PlansConfigurationEntity": {
        "type": "object",
        "properties": {
          "security": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlanSecurityEntity"
            }
          }
        }
      },
      "DictionaryListItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "MANUAL",
              "DYNAMIC"
            ]
          },
          "provider": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "enum": [
              "INITIALIZED",
              "STOPPED",
              "STARTED",
              "CLOSED"
            ]
          },
          "properties": {
            "type": "integer",
            "format": "int32"
          },
          "created_at": {
            "type": "integer",
            "format": "int64"
          },
          "updated_at": {
            "type": "integer",
            "format": "int64"
          },
          "deployed_at": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "DictionaryEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "MANUAL",
              "DYNAMIC"
            ]
          },
          "state": {
            "type": "string",
            "enum": [
              "INITIALIZED",
              "STOPPED",
              "STARTED",
              "CLOSED"
            ]
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "provider": {
            "$ref": "#/components/schemas/DictionaryProviderEntity"
          },
          "trigger": {
            "$ref": "#/components/schemas/DictionaryTriggerEntity"
          },
          "created_at": {
            "type": "integer",
            "format": "int64"
          },
          "updated_at": {
            "type": "integer",
            "format": "int64"
          },
          "deployed_at": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "DictionaryProviderEntity": {
        "required": [
          "configuration",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "configuration": {
            "$ref": "#/components/schemas/JsonNode"
          }
        }
      },
      "DictionaryTriggerEntity": {
        "required": [
          "rate",
          "unit"
        ],
        "type": "object",
        "properties": {
          "rate": {
            "type": "integer",
            "format": "int64"
          },
          "unit": {
            "type": "string",
            "enum": [
              "NANOSECONDS",
              "MICROSECONDS",
              "MILLISECONDS",
              "SECONDS",
              "MINUTES",
              "HOURS",
              "DAYS"
            ]
          }
        }
      },
      "JsonNode": {
        "type": "object",
        "properties": {
          "valueNode": {
            "type": "boolean"
          },
          "containerNode": {
            "type": "boolean"
          },
          "missingNode": {
            "type": "boolean"
          },
          "object": {
            "type": "boolean"
          },
          "nodeType": {
            "type": "string",
            "enum": [
              "ARRAY",
              "BINARY",
              "BOOLEAN",
              "MISSING",
              null,
              "NUMBER",
              "OBJECT",
              "POJO",
              "STRING"
            ]
          },
          "pojo": {
            "type": "boolean"
          },
          "number": {
            "type": "boolean"
          },
          "integralNumber": {
            "type": "boolean"
          },
          "floatingPointNumber": {
            "type": "boolean"
          },
          "int": {
            "type": "boolean"
          },
          "long": {
            "type": "boolean"
          },
          "float": {
            "type": "boolean"
          },
          "double": {
            "type": "boolean"
          },
          "bigDecimal": {
            "type": "boolean"
          },
          "bigInteger": {
            "type": "boolean"
          },
          "textual": {
            "type": "boolean"
          },
          "boolean": {
            "type": "boolean"
          },
          "binary": {
            "type": "boolean"
          },
          "array": {
            "type": "boolean"
          },
          "empty": {
            "type": "boolean"
          },
          "null": {
            "type": "boolean"
          },
          "short": {
            "type": "boolean"
          }
        }
      },
      "NewDictionaryEntity": {
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 2147483647,
            "minLength": 3,
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "MANUAL",
              "DYNAMIC"
            ]
          },
          "provider": {
            "$ref": "#/components/schemas/DictionaryProviderEntity"
          },
          "trigger": {
            "$ref": "#/components/schemas/DictionaryTriggerEntity"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "UpdateDictionaryEntity": {
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "MANUAL",
              "DYNAMIC"
            ]
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "provider": {
            "$ref": "#/components/schemas/DictionaryProviderEntity"
          },
          "trigger": {
            "$ref": "#/components/schemas/DictionaryTriggerEntity"
          }
        }
      },
      "UpdateApiHeaderEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "order": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "NewApiHeaderEntity": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "ClientRegistrationProviderListItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "created_at": {
            "type": "integer",
            "format": "int64"
          },
          "updated_at": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ClientRegistrationProviderEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "discovery_endpoint": {
            "type": "string"
          },
          "initial_access_token_type": {
            "type": "string",
            "enum": [
              "INITIAL_ACCESS_TOKEN",
              "CLIENT_CREDENTIALS"
            ]
          },
          "client_id": {
            "type": "string"
          },
          "client_secret": {
            "type": "string"
          },
          "created_at": {
            "type": "integer",
            "format": "int64"
          },
          "updated_at": {
            "type": "integer",
            "format": "int64"
          },
          "initial_access_token": {
            "type": "string"
          },
          "renew_client_secret_support": {
            "type": "boolean"
          },
          "renew_client_secret_endpoint": {
            "type": "string"
          },
          "renew_client_secret_method": {
            "type": "string"
          },
          "software_id": {
            "type": "string"
          }
        }
      },
      "NewClientRegistrationProviderEntity": {
        "required": [
          "discovery_endpoint",
          "initial_access_token_type",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 2147483647,
            "minLength": 3,
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "discovery_endpoint": {
            "type": "string"
          },
          "initial_access_token_type": {
            "type": "string",
            "enum": [
              "INITIAL_ACCESS_TOKEN",
              "CLIENT_CREDENTIALS"
            ]
          },
          "client_id": {
            "type": "string"
          },
          "client_secret": {
            "type": "string"
          },
          "initial_access_token": {
            "type": "string"
          },
          "renew_client_secret_support": {
            "type": "boolean"
          },
          "renew_client_secret_endpoint": {
            "type": "string"
          },
          "renew_client_secret_method": {
            "type": "string"
          },
          "software_id": {
            "type": "string"
          }
        }
      },
      "UpdateClientRegistrationProviderEntity": {
        "required": [
          "discovery_endpoint",
          "initial_access_token_type",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "discovery_endpoint": {
            "type": "string"
          },
          "initial_access_token_type": {
            "type": "string",
            "enum": [
              "INITIAL_ACCESS_TOKEN",
              "CLIENT_CREDENTIALS"
            ]
          },
          "client_id": {
            "type": "string"
          },
          "client_secret": {
            "type": "string"
          },
          "initial_access_token": {
            "type": "string"
          },
          "renew_client_secret_support": {
            "type": "boolean"
          },
          "renew_client_secret_endpoint": {
            "type": "string"
          },
          "renew_client_secret_method": {
            "type": "string"
          },
          "software_id": {
            "type": "string"
          }
        }
      },
      "EntrypointEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UpdateEntryPointEntity": {
        "required": [
          "tags",
          "value"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "value": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string"
          },
          "tags": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "NewEntryPointEntity": {
        "required": [
          "tags",
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string"
          },
          "tags": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "QualityRuleEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "weight": {
            "type": "integer",
            "format": "int32"
          },
          "created_at": {
            "type": "integer",
            "format": "int64"
          },
          "updated_at": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "UpdateQualityRuleEntity": {
        "required": [
          "description",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "weight": {
            "maximum": 99999,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "NewQualityRuleEntity": {
        "required": [
          "description",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "weight": {
            "maximum": 99999,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ThemeComponentDefinition": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "css": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ThemeCssDefinition"
            }
          }
        }
      },
      "ThemeCssDefinition": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "COLOR",
              "LENGTH",
              "STRING",
              "IMAGE"
            ]
          },
          "value": {
            "type": "string"
          },
          "default": {
            "type": "string"
          }
        }
      },
      "ThemeDefinition": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ThemeComponentDefinition"
            }
          }
        }
      },
      "ThemeEntity": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "definition": {
            "$ref": "#/components/schemas/ThemeDefinition"
          },
          "logo": {
            "type": "string"
          },
          "backgroundImage": {
            "type": "string"
          },
          "optionalLogo": {
            "type": "string"
          },
          "created_at": {
            "type": "integer",
            "format": "int64"
          },
          "updated_at": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "UpdateThemeEntity": {
        "required": [
          "definition",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string"
          },
          "definition": {
            "$ref": "#/components/schemas/ThemeDefinition"
          },
          "enabled": {
            "type": "boolean"
          },
          "logo": {
            "type": "string"
          },
          "backgroundImage": {
            "type": "string"
          },
          "optionalLogo": {
            "type": "string"
          }
        }
      },
      "NewThemeEntity": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "definition": {
            "$ref": "#/components/schemas/ThemeDefinition"
          },
          "logo": {
            "type": "string"
          },
          "backgroundImage": {
            "type": "string"
          },
          "optionalLogo": {
            "type": "string"
          }
        }
      },
      "CategoryEntity": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "hidden": {
            "type": "boolean"
          },
          "order": {
            "type": "integer",
            "format": "int32"
          },
          "createdAt": {
            "type": "integer",
            "format": "int64"
          },
          "updatedAt": {
            "type": "integer",
            "format": "int64"
          },
          "totalApis": {
            "type": "integer",
            "format": "int64"
          },
          "highlightApi": {
            "type": "string"
          },
          "picture": {
            "type": "string"
          },
          "background": {
            "type": "string"
          },
          "page": {
            "type": "string"
          },
          "picture_url": {
            "type": "string"
          },
          "background_url": {
            "type": "string"
          }
        }
      },
      "UpdateCategoryEntity": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "defaultCategory": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "order": {
            "type": "integer",
            "format": "int32"
          },
          "highlightApi": {
            "type": "string"
          },
          "picture": {
            "type": "string"
          },
          "background": {
            "type": "string"
          },
          "page": {
            "type": "string"
          }
        }
      },
      "NewCategoryEntity": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "hidden": {
            "type": "boolean"
          },
          "order": {
            "type": "integer",
            "format": "int32"
          },
          "highlightApi": {
            "type": "string"
          },
          "picture": {
            "type": "string"
          },
          "background": {
            "type": "string"
          },
          "page": {
            "type": "string"
          }
        }
      },
      "NewTicketEntity": {
        "required": [
          "content",
          "subject"
        ],
        "type": "object",
        "properties": {
          "subject": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "application": {
            "type": "string"
          },
          "api": {
            "type": "string"
          },
          "copyToSender": {
            "type": "boolean"
          }
        }
      },
      "SearchableUser": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "reference": {
            "type": "string"
          },
          "picture": {
            "type": "string"
          },
          "firstname": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          }
        }
      },
      "GrantedAuthority": {
        "type": "object",
        "properties": {
          "authority": {
            "type": "string"
          }
        }
      },
      "UserDetailRole": {
        "type": "object",
        "properties": {
          "scope": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "permissions": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "UserDetails": {
        "type": "object",
        "properties": {
          "authorities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantedAuthority"
            }
          },
          "enabled": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "firstname": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "sourceId": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserDetailRole"
            }
          },
          "picture": {
            "type": "array",
            "items": {
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
              "type": "string",
              "format": "byte"
            }
          },
          "firstLogin": {
            "type": "boolean"
          },
          "displayNewsletterSubscription": {
            "type": "boolean"
          },
          "customFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {}
            }
          },
          "primaryOwner": {
            "type": "boolean"
          },
          "displayName": {
            "type": "string"
          }
        }
      },
      "UpdateUserEntity": {
        "type": "object",
        "properties": {
          "firstname": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "picture": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "newsletter": {
            "type": "boolean"
          },
          "customFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {}
            }
          }
        }
      },
      "PagedResultPortalNotificationEntity": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortalNotificationEntity"
            }
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "page": {
            "$ref": "#/components/schemas/Page"
          }
        }
      },
      "PortalNotificationEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "created_at": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "TokenEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "created_at": {
            "type": "integer",
            "format": "int64"
          },
          "expires_at": {
            "type": "integer",
            "format": "int64"
          },
          "last_use_at": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "NewTokenEntity": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "AlertMetric": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "thresholds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlertThreshold"
            }
          }
        }
      },
      "AlertThreshold": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "AuditResource": {
        "type": "object",
        "properties": {
          "events": {
            "$ref": "#/components/schemas/Response"
          }
        }
      },
      "EntityTag": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "weak": {
            "type": "boolean"
          }
        }
      },
      "Link": {
        "type": "object",
        "properties": {
          "rel": {
            "type": "string"
          },
          "uriBuilder": {
            "$ref": "#/components/schemas/UriBuilder"
          },
          "rels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "title": {
            "type": "string"
          },
          "uri": {
            "type": "string",
            "format": "uri"
          },
          "params": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "type": {
            "type": "string"
          }
        }
      },
      "Locale": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string"
          },
          "script": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "variant": {
            "type": "string"
          },
          "extensionKeys": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "unicodeLocaleAttributes": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "unicodeLocaleKeys": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "iso3Language": {
            "type": "string"
          },
          "iso3Country": {
            "type": "string"
          },
          "displayLanguage": {
            "type": "string"
          },
          "displayScript": {
            "type": "string"
          },
          "displayCountry": {
            "type": "string"
          },
          "displayVariant": {
            "type": "string"
          },
          "language": {
            "type": "string"
          }
        }
      },
      "MediaType": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "subtype": {
            "type": "string"
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "wildcardType": {
            "type": "boolean"
          },
          "wildcardSubtype": {
            "type": "boolean"
          }
        }
      },
      "NewCookie": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "path": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "maxAge": {
            "type": "integer",
            "format": "int32"
          },
          "expiry": {
            "type": "integer",
            "format": "int64"
          },
          "secure": {
            "type": "boolean"
          },
          "httpOnly": {
            "type": "boolean"
          }
        }
      },
      "StatusType": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "integer",
            "format": "int32"
          },
          "reasonPhrase": {
            "type": "string"
          },
          "family": {
            "type": "string",
            "enum": [
              "INFORMATIONAL",
              "SUCCESSFUL",
              "REDIRECTION",
              "CLIENT_ERROR",
              "SERVER_ERROR",
              "OTHER"
            ]
          }
        }
      },
      "UriBuilder": {
        "type": "object"
      },
      "AuditEvent": {
        "type": "object"
      },
      "Alert": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "Analytics": {
        "type": "object",
        "properties": {
          "clientTimeout": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ApiQualityMetrics": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "functionalDocumentationWeight": {
            "type": "integer",
            "format": "int32"
          },
          "technicalDocumentationWeight": {
            "type": "integer",
            "format": "int32"
          },
          "descriptionWeight": {
            "type": "integer",
            "format": "int32"
          },
          "descriptionMinLength": {
            "type": "integer",
            "format": "int32"
          },
          "logoWeight": {
            "type": "integer",
            "format": "int32"
          },
          "categoriesWeight": {
            "type": "integer",
            "format": "int32"
          },
          "labelsWeight": {
            "type": "integer",
            "format": "int32"
          },
          "healthcheckWeight": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ApiReview": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "ApplicationTypes": {
        "type": "object",
        "properties": {
          "simple": {
            "$ref": "#/components/schemas/Enabled"
          },
          "browser": {
            "$ref": "#/components/schemas/Enabled"
          },
          "web": {
            "$ref": "#/components/schemas/Enabled"
          },
          "native": {
            "$ref": "#/components/schemas/Enabled"
          },
          "backend_to_backend": {
            "$ref": "#/components/schemas/Enabled"
          }
        }
      },
      "Audit": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "trail": {
            "$ref": "#/components/schemas/AuditTrail"
          }
        }
      },
      "AuditTrail": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "Authentication": {
        "type": "object",
        "properties": {
          "forceLogin": {
            "$ref": "#/components/schemas/Enabled"
          },
          "localLogin": {
            "$ref": "#/components/schemas/Enabled"
          },
          "google": {
            "$ref": "#/components/schemas/GoogleAuthentication"
          },
          "github": {
            "$ref": "#/components/schemas/GithubAuthentication"
          },
          "oauth2": {
            "$ref": "#/components/schemas/OAuth2Authentication"
          }
        }
      },
      "ClientRegistration": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "Company": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "Documentation": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          }
        }
      },
      "Enabled": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "GithubAuthentication": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          }
        }
      },
      "GoogleAuthentication": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          }
        }
      },
      "Maintenance": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "Management": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "Newsletter": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "OAuth2Authentication": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "color": {
            "type": "string"
          },
          "authorizationEndpoint": {
            "type": "string"
          },
          "userLogoutEndpoint": {
            "type": "string"
          },
          "scope": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "OpenAPIDocType": {
        "type": "object",
        "properties": {
          "swagger": {
            "$ref": "#/components/schemas/Enabled"
          },
          "redoc": {
            "$ref": "#/components/schemas/Enabled"
          },
          "defaultType": {
            "type": "string"
          }
        }
      },
      "OpenAPIDocViewer": {
        "type": "object",
        "properties": {
          "openAPIDocType": {
            "$ref": "#/components/schemas/OpenAPIDocType"
          }
        }
      },
      "PlanSecurity": {
        "type": "object",
        "properties": {
          "apikey": {
            "$ref": "#/components/schemas/Enabled"
          },
          "oauth2": {
            "$ref": "#/components/schemas/Enabled"
          },
          "keyless": {
            "$ref": "#/components/schemas/Enabled"
          },
          "jwt": {
            "$ref": "#/components/schemas/Enabled"
          }
        }
      },
      "Portal": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "entrypoint": {
            "type": "string"
          },
          "apikeyHeader": {
            "type": "string"
          },
          "support": {
            "$ref": "#/components/schemas/Enabled"
          },
          "url": {
            "type": "string"
          },
          "apis": {
            "$ref": "#/components/schemas/PortalApis"
          },
          "analytics": {
            "$ref": "#/components/schemas/PortalAnalytics"
          },
          "rating": {
            "$ref": "#/components/schemas/PortalRating"
          },
          "userCreation": {
            "$ref": "#/components/schemas/PortalUserCreation"
          },
          "uploadMedia": {
            "$ref": "#/components/schemas/PortalUploadMedia"
          }
        }
      },
      "PortalAnalytics": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "trackingId": {
            "type": "string"
          }
        }
      },
      "PortalApis": {
        "type": "object",
        "properties": {
          "tilesMode": {
            "$ref": "#/components/schemas/Enabled"
          },
          "categoryMode": {
            "$ref": "#/components/schemas/Enabled"
          },
          "apiHeaderShowTags": {
            "$ref": "#/components/schemas/Enabled"
          },
          "apiHeaderShowCategories": {
            "$ref": "#/components/schemas/Enabled"
          }
        }
      },
      "PortalConfigEntity": {
        "type": "object",
        "properties": {
          "company": {
            "$ref": "#/components/schemas/Company"
          },
          "management": {
            "$ref": "#/components/schemas/Management"
          },
          "portal": {
            "$ref": "#/components/schemas/Portal"
          },
          "authentication": {
            "$ref": "#/components/schemas/Authentication"
          },
          "scheduler": {
            "$ref": "#/components/schemas/Scheduler"
          },
          "documentation": {
            "$ref": "#/components/schemas/Documentation"
          },
          "theme": {
            "$ref": "#/components/schemas/Theme"
          },
          "plan": {
            "$ref": "#/components/schemas/Plan"
          },
          "openAPIDocViewer": {
            "$ref": "#/components/schemas/OpenAPIDocViewer"
          },
          "apiQualityMetrics": {
            "$ref": "#/components/schemas/ApiQualityMetrics"
          },
          "apiReview": {
            "$ref": "#/components/schemas/ApiReview"
          },
          "logging": {
            "$ref": "#/components/schemas/Logging"
          },
          "analytics": {
            "$ref": "#/components/schemas/Analytics"
          },
          "application": {
            "$ref": "#/components/schemas/Application"
          },
          "alert": {
            "$ref": "#/components/schemas/Alert"
          },
          "maintenance": {
            "$ref": "#/components/schemas/Maintenance"
          },
          "newsletter": {
            "$ref": "#/components/schemas/Newsletter"
          },
          "reCaptcha": {
            "$ref": "#/components/schemas/ReCaptcha"
          }
        }
      },
      "PortalRating": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "comment": {
            "$ref": "#/components/schemas/RatingComment"
          }
        }
      },
      "PortalUploadMedia": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "maxSizeInOctet": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "PortalUserCreation": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "automaticValidation": {
            "$ref": "#/components/schemas/Enabled"
          }
        }
      },
      "RatingComment": {
        "type": "object",
        "properties": {
          "mandatory": {
            "type": "boolean"
          }
        }
      },
      "ReCaptcha": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "siteKey": {
            "type": "string"
          }
        }
      },
      "Scheduler": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "integer",
            "format": "int32"
          },
          "notifications": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Theme": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "logo": {
            "type": "string"
          },
          "loader": {
            "type": "string"
          },
          "css": {
            "type": "string"
          }
        }
      },
      "SocialIdentityProviderEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "clientId": {
            "type": "string"
          },
          "emailRequired": {
            "type": "boolean"
          },
          "syncMappings": {
            "type": "boolean"
          },
          "scopeDelimiter": {
            "type": "string"
          },
          "requiredUrlParams": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "display": {
            "type": "string"
          },
          "optionalUrlParams": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tokenIntrospectionEndpoint": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "GOOGLE",
              "GITHUB",
              "GRAVITEEIO_AM",
              "OIDC"
            ]
          },
          "authorizationEndpoint": {
            "type": "string"
          },
          "color": {
            "type": "string"
          },
          "userLogoutEndpoint": {
            "type": "string"
          }
        }
      },
      "FetcherEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "FetcherListItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "schema": {
            "type": "string"
          }
        }
      },
      "PolicyListItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "REQUEST",
              "RESPONSE",
              "REQUEST_RESPONSE"
            ]
          },
          "schema": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          }
        }
      },
      "PolicyDevelopmentEntity": {
        "type": "object",
        "properties": {
          "class": {
            "type": "string"
          },
          "configuration_class": {
            "type": "string"
          },
          "on_request_method": {
            "type": "string"
          },
          "on_response_method": {
            "type": "string"
          }
        }
      },
      "PolicyEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "REQUEST",
              "RESPONSE",
              "REQUEST_RESPONSE"
            ]
          },
          "plugin": {
            "$ref": "#/components/schemas/PluginEntity"
          },
          "dev": {
            "$ref": "#/components/schemas/PolicyDevelopmentEntity"
          }
        }
      },
      "ResourceListItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "schema": {
            "type": "string"
          }
        }
      },
      "InstanceListItem": {
        "type": "object",
        "properties": {
          "event": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "hostname": {
            "type": "string"
          },
          "ip": {
            "type": "string"
          },
          "port": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tenant": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "enum": [
              "STARTED",
              "UNKNOWN",
              "STOPPED"
            ]
          },
          "started_at": {
            "type": "integer",
            "format": "int64"
          },
          "last_heartbeat_at": {
            "type": "integer",
            "format": "int64"
          },
          "stopped_at": {
            "type": "integer",
            "format": "int64"
          },
          "operating_system_name": {
            "type": "string"
          }
        }
      },
      "PageInstanceListItem": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InstanceListItem"
            }
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "pageElements": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "MonitoringCPU": {
        "type": "object",
        "properties": {
          "percent_use": {
            "type": "integer",
            "format": "int32"
          },
          "load_average": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {}
            }
          }
        }
      },
      "MonitoringData": {
        "type": "object",
        "properties": {
          "cpu": {
            "$ref": "#/components/schemas/MonitoringCPU"
          },
          "process": {
            "$ref": "#/components/schemas/MonitoringProcess"
          },
          "jvm": {
            "$ref": "#/components/schemas/MonitoringJVM"
          },
          "thread": {
            "$ref": "#/components/schemas/MonitoringThread"
          },
          "gc": {
            "$ref": "#/components/schemas/MonitoringGC"
          }
        }
      },
      "MonitoringGC": {
        "type": "object",
        "properties": {
          "young_collection_count": {
            "type": "integer",
            "format": "int32"
          },
          "young_collection_time_in_millis": {
            "type": "integer",
            "format": "int64"
          },
          "old_collection_count": {
            "type": "integer",
            "format": "int32"
          },
          "old_collection_time_in_millis": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "MonitoringJVM": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "uptime_in_millis": {
            "type": "integer",
            "format": "int64"
          },
          "heap_used_in_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "heap_used_percent": {
            "type": "integer",
            "format": "int32"
          },
          "heap_committed_in_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "heap_max_in_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "non_heap_used_in_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "non_heap_committed_in_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "young_pool_used_in_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "young_pool_max_in_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "young_pool_peak_used_in_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "young_pool_peak_max_in_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "survivor_pool_used_in_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "survivor_pool_max_in_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "survivor_pool_peak_used_in_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "survivor_pool_peak_max_in_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "old_pool_used_in_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "old_pool_max_in_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "old_pool_peak_used_in_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "old_pool_peak_max_in_bytes": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "MonitoringProcess": {
        "type": "object",
        "properties": {
          "cpu_percent": {
            "type": "integer",
            "format": "int32"
          },
          "open_file_descriptors": {
            "type": "integer",
            "format": "int32"
          },
          "max_file_descriptors": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "MonitoringThread": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "peak_count": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "InstanceEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "event": {
            "type": "string"
          },
          "hostname": {
            "type": "string"
          },
          "ip": {
            "type": "string"
          },
          "port": {
            "type": "string"
          },
          "tenant": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "state": {
            "type": "string",
            "enum": [
              "STARTED",
              "UNKNOWN",
              "STOPPED"
            ]
          },
          "systemProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "plugins": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PluginEntity"
            }
          },
          "started_at": {
            "type": "integer",
            "format": "int64"
          },
          "last_heartbeat_at": {
            "type": "integer",
            "format": "int64"
          },
          "stopped_at": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "PageEventEntity": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventEntity"
            }
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "pageElements": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "Payload": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "redirectUri": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "state": {
            "type": "string"
          }
        }
      },
      "UpdateEnvironmentEntity": {
        "required": [
          "name",
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "organizationId": {
            "type": "string"
          },
          "domainRestrictions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "EnvironmentEntity": {
        "required": [
          "name",
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "organizationId": {
            "type": "string"
          },
          "domainRestrictions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "gravitee-auth": {
        "type": "http",
        "scheme": "basic"
      }
    }
  }
}